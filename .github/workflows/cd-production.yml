# ChitLaq M1 MVP - Production Deployment Pipeline
# Generated by PROMPT 1.5 - CI/CD Pipeline & Automated Deployment
# Senior DevOps Engineer - 15+ years CI/CD and release management experience

name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      force_deploy:
        description: 'Force deployment (skip approval)'
        required: false
        default: 'false'
        type: boolean
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: 'false'
        type: boolean
      rollback_version:
        description: 'Rollback to specific version (format: YYYYMMDD-HHMMSS)'
        required: false
        type: string

env:
  ENVIRONMENT: production
  PRODUCTION_URL: https://chitlaq.com
  VPS_HOST: ${{ secrets.PRODUCTION_VPS_HOST }}
  VPS_USER: ${{ secrets.PRODUCTION_VPS_USER }}
  VPS_SSH_KEY: ${{ secrets.PRODUCTION_VPS_SSH_KEY }}

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback_version == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate production readiness
        run: |
          # Check if staging deployment was successful
          curl -f https://staging.chitlaq.com/health
          
          # Validate configuration
          node scripts/validate-config.js production
          
          # Check production environment health
          curl -f ${{ env.PRODUCTION_URL }}/health

      - name: Security validation
        run: |
          # Run security tests
          npm audit --audit-level=high
          
          # Check for known vulnerabilities
          node scripts/security-check.js production

      - name: Performance baseline check
        if: github.event.inputs.skip_tests != 'true'
        run: |
          node benchmarks/performance-tests.js staging baseline

  # Database migration preparation
  prepare-production-migration:
    name: Prepare Production Migration
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback_version == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Generate migration plan
        run: |
          node scripts/migrate.sh plan --env=production

      - name: Validate migration safety
        run: |
          node scripts/migrate.sh validate --env=production --safety-check

      - name: Create production backup
        run: |
          node scripts/backup.sh --env=production --pre-migration --encrypt

      - name: Test migration on staging
        run: |
          node scripts/migrate.sh test --env=staging

  # Production deployment approval
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, prepare-production-migration]
    if: github.event.inputs.force_deploy != 'true' && github.event.inputs.rollback_version == ''
    environment: production
    steps:
      - name: Request approval
        run: |
          echo "🚀 Production deployment ready for approval"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "URL: ${{ env.PRODUCTION_URL }}"
          echo ""
          echo "Please review the following:"
          echo "✅ Pre-deployment checks passed"
          echo "✅ Database migration prepared"
          echo "✅ Security validation completed"
          echo "✅ Performance baseline established"
          echo ""
          echo "Ready for production deployment!"

  # Blue-Green Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-approval]
    if: always() && (needs.production-approval.result == 'success' || github.event.inputs.force_deploy == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            # Set environment variables
            export ENVIRONMENT=production
            export DEPLOYMENT_ID=$(date +%Y%m%d-%H%M%S)
            export BLUE_GREEN_DIR="/opt/chitlaq/production/deployments"
            export CURRENT_DIR="/opt/chitlaq/production/current"
            
            # Create deployment directory
            mkdir -p $BLUE_GREEN_DIR/$DEPLOYMENT_ID
            
            # Clone latest code
            cd $BLUE_GREEN_DIR/$DEPLOYMENT_ID
            git clone https://github.com/${{ github.repository }}.git .
            git checkout ${{ github.sha }}
            
            # Copy production environment configuration
            cp /opt/chitlaq/production/configs/production.env .env
            
            # Run production deployment script
            chmod +x scripts/deploy-production.sh
            ./scripts/deploy-production.sh --deployment-id=$DEPLOYMENT_ID --blue-green
            
            # Update current deployment symlink
            ln -sfn $BLUE_GREEN_DIR/$DEPLOYMENT_ID $CURRENT_DIR
            
            echo "Production deployment $DEPLOYMENT_ID completed successfully"
          EOF

      - name: Wait for deployment
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 60

  # Production health checks
  production-health-checks:
    name: Production Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive health checks
        run: |
          node scripts/health-check.sh --env=production --comprehensive --timeout=300

      - name: Validate critical API endpoints
        run: |
          # Test critical production endpoints
          curl -f ${{ env.PRODUCTION_URL }}/api/health
          curl -f ${{ env.PRODUCTION_URL }}/api/auth/status
          curl -f ${{ env.PRODUCTION_URL }}/api/feed
          curl -f ${{ env.PRODUCTION_URL }}/api/search?q=test

      - name: Test database connectivity
        run: |
          node scripts/test-db-connection.js --env=production

      - name: Test WebSocket connectivity
        run: |
          node scripts/test-websocket.js --env=production

      - name: Validate SSL/TLS
        run: |
          node scripts/ssl-test.js --env=production --strict

      - name: Check monitoring endpoints
        run: |
          curl -f ${{ env.PRODUCTION_URL }}/metrics
          curl -f ${{ env.PRODUCTION_URL }}/grafana/api/health

  # Production smoke tests
  production-smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [production-health-checks]
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run production smoke tests
        run: |
          npm run test:smoke:production

      - name: Test critical user flows
        run: |
          # Test user registration
          node scripts/test-user-flow.js --env=production --flow=registration --critical
          
          # Test user login
          node scripts/test-user-flow.js --env=production --flow=login --critical
          
          # Test post creation
          node scripts/test-user-flow.js --env=production --flow=post-creation --critical
          
          # Test messaging
          node scripts/test-user-flow.js --env=production --flow=messaging --critical

  # Performance validation
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [production-smoke-tests]
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          node benchmarks/performance-tests.js production baseline

      - name: Check performance regression
        run: |
          node scripts/performance-regression-check.js --env=production --threshold=10

      - name: Validate SLA metrics
        run: |
          node scripts/validate-sla.js --env=production

  # Security validation
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: [production-health-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: |
          # Test security headers
          node scripts/security-headers-test.js --env=production
          
          # Test rate limiting
          node scripts/rate-limit-test.js --env=production
          
          # Test authentication
          node scripts/auth-test.js --env=production

      - name: Vulnerability scan
        run: |
          npm audit --audit-level=high

  # Monitoring validation
  monitoring-validation:
    name: Monitoring Validation
    runs-on: ubuntu-latest
    needs: [production-health-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Validate monitoring setup
        run: |
          node scripts/validate-monitoring.js --env=production

      - name: Check alerting
        run: |
          node scripts/test-alerts.js --env=production

      - name: Validate log aggregation
        run: |
          node scripts/check-logs.js --env=production

  # Final validation
  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [production-smoke-tests, performance-validation, security-validation, monitoring-validation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Final production validation
        run: |
          # Check all critical services
          node scripts/final-validation.js --env=production
          
          # Verify deployment metrics
          node scripts/verify-deployment-metrics.js --env=production

      - name: Update deployment status
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "production",
              "status": "success",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "url": "${{ env.PRODUCTION_URL }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "deployment_id": "'$(date +%Y%m%d-%H%M%S)'"
            }'

  # Cleanup old deployments
  cleanup-production:
    name: Cleanup Old Production Deployments
    runs-on: ubuntu-latest
    needs: [final-validation]
    if: always() && needs.final-validation.result == 'success'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: Cleanup old production deployments
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            # Keep only last 3 production deployments
            cd /opt/chitlaq/production/deployments
            ls -t | tail -n +4 | xargs -r rm -rf
            
            # Clean up old Docker images (keep last 5)
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | \
              grep chitlaq | tail -n +6 | awk '{print $3}' | xargs -r docker rmi
            
            # Clean up old containers
            docker container prune -f
            
            # Clean up old volumes
            docker volume prune -f
          EOF

  # Production notification
  notify-production:
    name: Production Deployment Notification
    runs-on: ubuntu-latest
    needs: [final-validation, cleanup-production]
    if: always()
    steps:
      - name: Notify Slack - Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🎉 Production Deployment Successful!
            
            Environment: Production
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ env.PRODUCTION_URL }}
            
            All systems operational! 🚀

      - name: Notify Slack - Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#critical-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚨 Production Deployment Failed!
            
            Environment: Production
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Immediate attention required!

      - name: Send email notification
        if: always()
        run: |
          curl -X POST ${{ secrets.EMAIL_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "to": "engineering@chitlaq.com",
              "subject": "Production Deployment: ${{ job.status }}",
              "body": "Production deployment ${{ job.status }} for commit ${{ github.sha }}"
            }'

  # Emergency rollback
  emergency-rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, production-health-checks, production-smoke-tests, performance-validation, security-validation, monitoring-validation, final-validation]
    if: failure() || github.event.inputs.rollback_version != ''
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: Emergency rollback
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            export BLUE_GREEN_DIR="/opt/chitlaq/production/deployments"
            export CURRENT_DIR="/opt/chitlaq/production/current"
            
            if [ -n "${{ github.event.inputs.rollback_version }}" ]; then
              ROLLBACK_VERSION="${{ github.event.inputs.rollback_version }}"
            else
              # Get previous deployment
              ROLLBACK_VERSION=$(ls -t $BLUE_GREEN_DIR | head -n 2 | tail -n 1)
            fi
            
            if [ -n "$ROLLBACK_VERSION" ] && [ -d "$BLUE_GREEN_DIR/$ROLLBACK_VERSION" ]; then
              echo "Rolling back to deployment: $ROLLBACK_VERSION"
              
              # Update symlink to previous deployment
              ln -sfn $BLUE_GREEN_DIR/$ROLLBACK_VERSION $CURRENT_DIR
              
              # Restart services
              cd $CURRENT_DIR
              docker-compose restart
              
              # Wait for services to be ready
              sleep 30
              
              # Verify rollback
              curl -f ${{ env.PRODUCTION_URL }}/health
              
              echo "Emergency rollback completed successfully"
            else
              echo "No valid deployment found for rollback"
              exit 1
            fi
          EOF

      - name: Verify rollback
        run: |
          sleep 60
          curl -f ${{ env.PRODUCTION_URL }}/health

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#critical-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ⚠️ Production Emergency Rollback
            
            Environment: Production
            Rollback Version: ${{ github.event.inputs.rollback_version || 'Previous' }}
            
            Production deployment failed and was automatically rolled back.
