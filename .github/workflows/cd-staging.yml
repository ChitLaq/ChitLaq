# ChitLaq M1 MVP - Staging Deployment Pipeline
# Generated by PROMPT 1.5 - CI/CD Pipeline & Automated Deployment
# Senior DevOps Engineer - 15+ years CI/CD and release management experience

name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: 'false'
        type: boolean

env:
  ENVIRONMENT: staging
  STAGING_URL: https://staging.chitlaq.com
  VPS_HOST: ${{ secrets.STAGING_VPS_HOST }}
  VPS_USER: ${{ secrets.STAGING_VPS_USER }}
  VPS_SSH_KEY: ${{ secrets.STAGING_VPS_SSH_KEY }}

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.force_deploy != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          npm run test:smoke

      - name: Validate configuration
        run: |
          node scripts/validate-config.js staging

      - name: Check staging environment health
        run: |
          curl -f ${{ env.STAGING_URL }}/health || echo "Staging environment not accessible"

  # Database migration preparation
  prepare-migration:
    name: Prepare Database Migration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Generate migration plan
        run: |
          node scripts/migrate.sh plan --env=staging

      - name: Validate migration safety
        run: |
          node scripts/migrate.sh validate --env=staging

      - name: Create migration backup
        run: |
          node scripts/backup.sh --env=staging --pre-migration

  # Blue-Green Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, prepare-migration]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to staging
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            # Set environment variables
            export ENVIRONMENT=staging
            export DEPLOYMENT_ID=$(date +%Y%m%d-%H%M%S)
            export BLUE_GREEN_DIR="/opt/chitlaq/deployments"
            
            # Create deployment directory
            mkdir -p $BLUE_GREEN_DIR/$DEPLOYMENT_ID
            
            # Clone latest code
            cd $BLUE_GREEN_DIR/$DEPLOYMENT_ID
            git clone https://github.com/${{ github.repository }}.git .
            git checkout ${{ github.sha }}
            
            # Copy environment configuration
            cp /opt/chitlaq/configs/staging.env .env
            
            # Run deployment script
            chmod +x scripts/deploy-staging.sh
            ./scripts/deploy-staging.sh --deployment-id=$DEPLOYMENT_ID
            
            # Update current deployment symlink
            ln -sfn $BLUE_GREEN_DIR/$DEPLOYMENT_ID /opt/chitlaq/current
            
            echo "Deployment $DEPLOYMENT_ID completed successfully"
          EOF

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          sleep 30

  # Health checks and validation
  health-checks:
    name: Health Checks & Validation
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive health checks
        run: |
          node scripts/health-check.sh --env=staging --comprehensive

      - name: Validate API endpoints
        run: |
          # Test critical API endpoints
          curl -f ${{ env.STAGING_URL }}/api/health
          curl -f ${{ env.STAGING_URL }}/api/auth/status
          curl -f ${{ env.STAGING_URL }}/api/feed
          curl -f ${{ env.STAGING_URL }}/api/search?q=test

      - name: Test database connectivity
        run: |
          node scripts/test-db-connection.js --env=staging

      - name: Test WebSocket connectivity
        run: |
          node scripts/test-websocket.js --env=staging

      - name: Run integration tests against staging
        run: |
          npm run test:integration:staging

      - name: Performance baseline check
        run: |
          node benchmarks/performance-tests.js staging baseline

  # Security validation
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: |
          # Test SSL/TLS configuration
          node scripts/ssl-test.js --env=staging
          
          # Test security headers
          node scripts/security-headers-test.js --env=staging
          
          # Test rate limiting
          node scripts/rate-limit-test.js --env=staging

      - name: Vulnerability scan
        run: |
          npm audit --audit-level=moderate

  # Smoke tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [health-checks, security-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          npm run test:smoke:staging

      - name: Test user registration flow
        run: |
          node scripts/test-user-flow.js --env=staging --flow=registration

      - name: Test user login flow
        run: |
          node scripts/test-user-flow.js --env=staging --flow=login

      - name: Test post creation flow
        run: |
          node scripts/test-user-flow.js --env=staging --flow=post-creation

      - name: Test messaging flow
        run: |
          node scripts/test-user-flow.js --env=staging --flow=messaging

  # Performance testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run load tests
        run: |
          node benchmarks/performance-tests.js staging load

      - name: Run stress tests
        run: |
          node benchmarks/performance-tests.js staging stress

      - name: Check performance regression
        run: |
          node scripts/performance-regression-check.js --env=staging

  # Deployment validation
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [performance-testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Validate deployment metrics
        run: |
          # Check Prometheus metrics
          curl -f ${{ env.STAGING_URL }}/metrics
          
          # Check Grafana dashboards
          curl -f ${{ env.STAGING_URL }}/grafana/api/health

      - name: Validate monitoring setup
        run: |
          node scripts/validate-monitoring.js --env=staging

      - name: Check log aggregation
        run: |
          node scripts/check-logs.js --env=staging

      - name: Validate alerting
        run: |
          node scripts/test-alerts.js --env=staging

  # Cleanup old deployments
  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: [deployment-validation]
    if: always()
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: Cleanup old staging deployments
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            # Keep only last 5 deployments
            cd /opt/chitlaq/deployments
            ls -t | tail -n +6 | xargs -r rm -rf
            
            # Clean up old Docker images
            docker image prune -f
            
            # Clean up old containers
            docker container prune -f
          EOF

  # Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deployment-validation, cleanup]
    if: always()
    steps:
      - name: Notify Slack - Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚀 Staging Deployment Successful!
            
            Environment: Staging
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ env.STAGING_URL }}
            
            Ready for production deployment! ✅

      - name: Notify Slack - Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ❌ Staging Deployment Failed!
            
            Environment: Staging
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Please check the logs and fix the issues.

      - name: Update deployment status
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "staging",
              "status": "${{ job.status }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "url": "${{ env.STAGING_URL }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, health-checks, security-validation, smoke-tests, performance-testing, deployment-validation]
    if: failure()
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: Rollback staging deployment
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            # Get previous deployment
            PREVIOUS_DEPLOYMENT=$(ls -t /opt/chitlaq/deployments | head -n 2 | tail -n 1)
            
            if [ -n "$PREVIOUS_DEPLOYMENT" ]; then
              echo "Rolling back to deployment: $PREVIOUS_DEPLOYMENT"
              
              # Update symlink to previous deployment
              ln -sfn /opt/chitlaq/deployments/$PREVIOUS_DEPLOYMENT /opt/chitlaq/current
              
              # Restart services
              cd /opt/chitlaq/current
              docker-compose restart
              
              echo "Rollback completed successfully"
            else
              echo "No previous deployment found for rollback"
              exit 1
            fi
          EOF

      - name: Verify rollback
        run: |
          sleep 30
          curl -f ${{ env.STAGING_URL }}/health

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ⚠️ Staging Deployment Rolled Back
            
            Environment: Staging
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Deployment failed and was automatically rolled back.
