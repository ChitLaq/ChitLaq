# ChitLaq M1 MVP - Continuous Integration Pipeline
# Generated by PROMPT 1.5 - CI/CD Pipeline & Automated Deployment
# Senior DevOps Engineer - 15+ years CI/CD and release management experience

name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.21'
  RUST_VERSION: '1.75'
  BUN_VERSION: '1.0.0'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality & Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          # Node.js dependencies
          npm ci
          
          # Go dependencies
          cd services/feed-service && go mod download
          
          # Rust dependencies
          cd services/search-service && cargo fetch
          
          # Bun dependencies
          cd services/realtime-service && bun install

      - name: Run ESLint
        run: |
          npm run lint
          npm run lint:fix

      - name: Run Prettier
        run: |
          npm run format:check
          npm run format:fix

      - name: Run Go fmt
        run: |
          cd services/feed-service
          go fmt ./...

      - name: Run Go vet
        run: |
          cd services/feed-service
          go vet ./...

      - name: Run Rust fmt
        run: |
          cd services/search-service
          cargo fmt --all -- --check

      - name: Run Clippy
        run: |
          cd services/search-service
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run TypeScript check
        run: npm run type-check

      - name: Upload linting results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linting-results
          path: |
            lint-results.json
            eslint-report.html

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --json > npm-audit-results.json

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, typescript, go, rust

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            trivy-results.sarif
            snyk-results.json

  # Unit & Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chitlaq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd services/feed-service && go mod download
          cd services/search-service && cargo fetch
          cd services/realtime-service && bun install

      - name: Run database migrations
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/chitlaq_test"
          npm run db:migrate

      - name: Run Node.js unit tests
        run: |
          npm run test:unit
          npm run test:coverage

      - name: Run Go unit tests
        run: |
          cd services/feed-service
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Run Rust unit tests
        run: |
          cd services/search-service
          cargo test --verbose

      - name: Run Bun unit tests
        run: |
          cd services/realtime-service
          bun test

      - name: Run integration tests
        run: |
          npm run test:integration

      - name: Run E2E tests
        run: |
          npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
            junit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build & Containerization
  build:
    name: Build & Containerization
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, unit-tests]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            chitlaq/api-gateway
            chitlaq/web-app
            chitlaq/realtime-service
            chitlaq/feed-service
            chitlaq/search-service
            chitlaq/admin-panel
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./services/api-gateway
          push: true
          tags: chitlaq/api-gateway:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web App
        uses: docker/build-push-action@v5
        with:
          context: ./services/web-app
          push: true
          tags: chitlaq/web-app:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Realtime Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/realtime-service
          push: true
          tags: chitlaq/realtime-service:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Feed Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/feed-service
          push: true
          tags: chitlaq/feed-service:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Search Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/search-service
          push: true
          tags: chitlaq/search-service:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Admin Panel
        uses: docker/build-push-action@v5
        with:
          context: ./services/admin-panel
          push: true
          tags: chitlaq/admin-panel:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: chitlaq/api-gateway:${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom-api-gateway.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            sbom-*.json
            docker-compose.yml
            docker-compose.override.yml

  # Performance Testing
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          node benchmarks/performance-tests.js staging baseline
          node benchmarks/performance-tests.js staging load

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            performance-report-*.json
            baseline-test-*.json
            load-test-*.json

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, unit-tests, build]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Check code quality results
        run: |
          if [ -f "linting-results/lint-results.json" ]; then
            echo "✅ Code quality checks passed"
          else
            echo "❌ Code quality checks failed"
            exit 1
          fi

      - name: Check security scan results
        run: |
          if [ -f "security-scan-results/npm-audit-results.json" ]; then
            echo "✅ Security scans completed"
          else
            echo "❌ Security scans failed"
            exit 1
          fi

      - name: Check test results
        run: |
          if [ -f "test-results/junit.xml" ]; then
            echo "✅ All tests passed"
          else
            echo "❌ Tests failed"
            exit 1
          fi

      - name: Check build results
        run: |
          if [ -f "build-artifacts/docker-compose.yml" ]; then
            echo "✅ Build completed successfully"
          else
            echo "❌ Build failed"
            exit 1
          fi

      - name: Quality Gate Summary
        run: |
          echo "🎉 Quality Gate: PASSED"
          echo "✅ Code Quality: PASSED"
          echo "✅ Security Scan: PASSED"
          echo "✅ Unit Tests: PASSED"
          echo "✅ Build: PASSED"
          echo ""
          echo "Ready for deployment! 🚀"

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'CI Pipeline failed for ${{ github.repository }}'
