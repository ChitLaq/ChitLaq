-- ChitLaq M1 MVP - Initial Database Schema
-- Complete social media platform schema with performance optimization
-- Generated by PROMPT 1.3 - Database Schema & Migrations

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";
CREATE EXTENSION IF NOT EXISTS "unaccent";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "btree_gin";
CREATE EXTENSION IF NOT EXISTS "btree_gist";

-- Create custom types
CREATE TYPE user_status AS ENUM ('pending', 'active', 'suspended', 'deleted');
CREATE TYPE post_type AS ENUM ('text', 'image', 'video', 'poll', 'share');
CREATE TYPE notification_type AS ENUM ('like', 'comment', 'follow', 'mention', 'message', 'system');
CREATE TYPE message_type AS ENUM ('text', 'image', 'file', 'system');
CREATE TYPE relationship_type AS ENUM ('follow', 'block', 'mute');
CREATE TYPE privacy_level AS ENUM ('public', 'followers', 'private');
CREATE TYPE report_type AS ENUM ('spam', 'harassment', 'hate_speech', 'violence', 'adult_content', 'copyright', 'other');
CREATE TYPE report_status AS ENUM ('pending', 'reviewed', 'action_taken', 'dismissed');
CREATE TYPE moderation_action AS ENUM ('warn', 'suspend', 'delete_content', 'ban', 'no_action');

-- =====================================================
-- AUTHENTICATION & USER MANAGEMENT
-- =====================================================

-- Users table with comprehensive profile management
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) NOT NULL UNIQUE,
    email_verified_at TIMESTAMP WITH TIME ZONE,
    password_hash VARCHAR(255) NOT NULL,
    username VARCHAR(50) NOT NULL UNIQUE,
    display_name VARCHAR(100),
    bio TEXT,
    avatar_url VARCHAR(500),
    cover_url VARCHAR(500),
    location VARCHAR(100),
    website VARCHAR(200),
    birth_date DATE,
    status user_status DEFAULT 'pending',
    is_admin BOOLEAN DEFAULT FALSE,
    is_verified BOOLEAN DEFAULT FALSE,
    is_private BOOLEAN DEFAULT FALSE,
    followers_count INTEGER DEFAULT 0,
    following_count INTEGER DEFAULT 0,
    posts_count INTEGER DEFAULT 0,
    last_active_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- University email validation
    university_domain VARCHAR(100),
    university_verified_at TIMESTAMP WITH TIME ZONE,
    graduation_year INTEGER,
    major VARCHAR(100),
    
    -- Privacy and security settings
    two_factor_enabled BOOLEAN DEFAULT FALSE,
    two_factor_secret VARCHAR(32),
    login_attempts INTEGER DEFAULT 0,
    locked_until TIMESTAMP WITH TIME ZONE,
    
    -- Metadata and analytics
    metadata JSONB DEFAULT '{}',
    
    -- Constraints
    CONSTRAINT users_username_length CHECK (char_length(username) >= 3),
    CONSTRAINT users_email_format CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    CONSTRAINT users_website_format CHECK (website IS NULL OR website ~* '^https?://'),
    CONSTRAINT users_graduation_year_range CHECK (graduation_year IS NULL OR (graduation_year >= 1950 AND graduation_year <= EXTRACT(YEAR FROM NOW()) + 10))
);

-- User sessions for security tracking
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token_hash VARCHAR(255) NOT NULL UNIQUE,
    ip_address INET,
    user_agent TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    last_used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Metadata
    device_info JSONB DEFAULT '{}',
    location_info JSONB DEFAULT '{}'
);

-- University domains for email validation
CREATE TABLE university_domains (
    id SERIAL PRIMARY KEY,
    domain VARCHAR(100) NOT NULL UNIQUE,
    university_name VARCHAR(200) NOT NULL,
    country_code CHAR(2) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    verification_required BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- SOCIAL RELATIONSHIPS
-- =====================================================

-- User relationships (follows, blocks, mutes)
CREATE TABLE user_relationships (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    follower_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    following_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    relationship_type relationship_type NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Prevent self-relationships and duplicates
    CONSTRAINT user_relationships_not_self CHECK (follower_id != following_id),
    CONSTRAINT user_relationships_unique UNIQUE (follower_id, following_id, relationship_type)
);

-- Friend suggestions based on mutual connections
CREATE TABLE friend_suggestions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    suggested_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    score REAL NOT NULL DEFAULT 0,
    reason VARCHAR(100),
    shown_at TIMESTAMP WITH TIME ZONE,
    dismissed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT friend_suggestions_not_self CHECK (user_id != suggested_user_id),
    CONSTRAINT friend_suggestions_unique UNIQUE (user_id, suggested_user_id)
);

-- =====================================================
-- CONTENT SYSTEM
-- =====================================================

-- Posts with comprehensive content management
CREATE TABLE posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    post_type post_type DEFAULT 'text',
    privacy_level privacy_level DEFAULT 'public',
    
    -- Engagement metrics
    likes_count INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    shares_count INTEGER DEFAULT 0,
    views_count INTEGER DEFAULT 0,
    
    -- Media attachments
    media_urls TEXT[],
    media_metadata JSONB DEFAULT '{}',
    
    -- Location and tagging
    location VARCHAR(100),
    tagged_users UUID[],
    
    -- Content moderation
    is_reported BOOLEAN DEFAULT FALSE,
    is_hidden BOOLEAN DEFAULT FALSE,
    moderation_notes TEXT,
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    -- Search and analytics
    search_vector TSVECTOR,
    metadata JSONB DEFAULT '{}',
    
    -- Constraints
    CONSTRAINT posts_content_not_empty CHECK (char_length(trim(content)) > 0),
    CONSTRAINT posts_media_limit CHECK (array_length(media_urls, 1) IS NULL OR array_length(media_urls, 1) <= 10)
);

-- Hashtags for content discovery
CREATE TABLE hashtags (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    normalized_name VARCHAR(100) NOT NULL UNIQUE,
    usage_count INTEGER DEFAULT 0,
    trending_score REAL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT hashtags_name_format CHECK (name ~* '^[a-zA-Z0-9_]+$')
);

-- Post hashtag relationships
CREATE TABLE post_hashtags (
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    PRIMARY KEY (post_id, hashtag_id)
);

-- Post likes
CREATE TABLE post_likes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT post_likes_unique UNIQUE (post_id, user_id)
);

-- Post comments
CREATE TABLE post_comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    parent_comment_id UUID REFERENCES post_comments(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    likes_count INTEGER DEFAULT 0,
    replies_count INTEGER DEFAULT 0,
    is_reported BOOLEAN DEFAULT FALSE,
    is_hidden BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    CONSTRAINT post_comments_content_not_empty CHECK (char_length(trim(content)) > 0)
);

-- Comment likes
CREATE TABLE comment_likes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    comment_id UUID NOT NULL REFERENCES post_comments(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT comment_likes_unique UNIQUE (comment_id, user_id)
);

-- Post shares/reposts
CREATE TABLE post_shares (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    original_post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    comment TEXT,
    privacy_level privacy_level DEFAULT 'public',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT post_shares_unique UNIQUE (original_post_id, user_id)
);

-- =====================================================
-- MESSAGING SYSTEM
-- =====================================================

-- Conversations for direct messaging
CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(200),
    is_group BOOLEAN DEFAULT FALSE,
    created_by UUID REFERENCES users(id) ON DELETE SET NULL,
    last_message_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Group conversation settings
    max_participants INTEGER DEFAULT 50,
    metadata JSONB DEFAULT '{}'
);

-- Conversation participants
CREATE TABLE conversation_participants (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    left_at TIMESTAMP WITH TIME ZONE,
    last_read_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_admin BOOLEAN DEFAULT FALSE,
    is_muted BOOLEAN DEFAULT FALSE,
    
    CONSTRAINT conversation_participants_unique UNIQUE (conversation_id, user_id)
);

-- Messages within conversations
CREATE TABLE messages (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
    sender_id UUID REFERENCES users(id) ON DELETE SET NULL,
    content TEXT,
    message_type message_type DEFAULT 'text',
    
    -- Message metadata
    media_url VARCHAR(500),
    media_metadata JSONB DEFAULT '{}',
    reply_to_message_id UUID REFERENCES messages(id) ON DELETE SET NULL,
    
    -- Message status
    is_edited BOOLEAN DEFAULT FALSE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Search
    search_vector TSVECTOR,
    
    CONSTRAINT messages_content_required CHECK (
        (message_type = 'text' AND content IS NOT NULL AND char_length(trim(content)) > 0) OR
        (message_type != 'text' AND (content IS NOT NULL OR media_url IS NOT NULL))
    )
);

-- Message read receipts
CREATE TABLE message_read_receipts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    message_id UUID NOT NULL REFERENCES messages(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    read_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT message_read_receipts_unique UNIQUE (message_id, user_id)
);

-- =====================================================
-- NOTIFICATIONS SYSTEM
-- =====================================================

-- User notifications
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    type notification_type NOT NULL,
    title VARCHAR(200) NOT NULL,
    message TEXT,
    
    -- Related entities
    actor_id UUID REFERENCES users(id) ON DELETE SET NULL,
    post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
    comment_id UUID REFERENCES post_comments(id) ON DELETE CASCADE,
    conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
    
    -- Notification status
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMP WITH TIME ZONE,
    is_pushed BOOLEAN DEFAULT FALSE,
    pushed_at TIMESTAMP WITH TIME ZONE,
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Metadata
    metadata JSONB DEFAULT '{}'
);

-- User notification preferences
CREATE TABLE notification_preferences (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    
    -- Notification type preferences
    likes_enabled BOOLEAN DEFAULT TRUE,
    comments_enabled BOOLEAN DEFAULT TRUE,
    follows_enabled BOOLEAN DEFAULT TRUE,
    mentions_enabled BOOLEAN DEFAULT TRUE,
    messages_enabled BOOLEAN DEFAULT TRUE,
    system_enabled BOOLEAN DEFAULT TRUE,
    
    -- Delivery preferences
    push_enabled BOOLEAN DEFAULT TRUE,
    email_enabled BOOLEAN DEFAULT TRUE,
    
    -- Quiet hours
    quiet_hours_start TIME,
    quiet_hours_end TIME,
    quiet_days INTEGER[], -- 0-6 for Sunday-Saturday
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT notification_preferences_unique_user UNIQUE (user_id)
);

-- =====================================================
-- CONTENT MODERATION & REPORTING
-- =====================================================

-- Content reports
CREATE TABLE reports (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    reporter_id UUID REFERENCES users(id) ON DELETE SET NULL,
    reported_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
    comment_id UUID REFERENCES post_comments(id) ON DELETE CASCADE,
    
    report_type report_type NOT NULL,
    description TEXT,
    status report_status DEFAULT 'pending',
    
    -- Moderation
    reviewed_by UUID REFERENCES users(id) ON DELETE SET NULL,
    reviewed_at TIMESTAMP WITH TIME ZONE,
    action_taken moderation_action,
    moderator_notes TEXT,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure at least one target is specified
    CONSTRAINT reports_target_required CHECK (
        (reported_user_id IS NOT NULL) OR 
        (post_id IS NOT NULL) OR 
        (comment_id IS NOT NULL)
    )
);

-- User moderation history
CREATE TABLE user_moderation_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    moderator_id UUID REFERENCES users(id) ON DELETE SET NULL,
    action moderation_action NOT NULL,
    reason TEXT,
    duration_hours INTEGER, -- For temporary actions like suspensions
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Metadata
    metadata JSONB DEFAULT '{}'
);

-- =====================================================
-- ANALYTICS & LOGGING
-- =====================================================

-- User activity tracking
CREATE TABLE user_activities (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    activity_type VARCHAR(50) NOT NULL,
    entity_type VARCHAR(50),
    entity_id UUID,
    
    -- Request information
    ip_address INET,
    user_agent TEXT,
    referer VARCHAR(500),
    
    -- Additional data
    metadata JSONB DEFAULT '{}',
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- System metrics for monitoring
CREATE TABLE system_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    metric_name VARCHAR(100) NOT NULL,
    metric_value REAL NOT NULL,
    tags JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- SEARCH & DISCOVERY
-- =====================================================

-- Trending topics
CREATE TABLE trending_topics (
    id SERIAL PRIMARY KEY,
    topic VARCHAR(200) NOT NULL,
    topic_type VARCHAR(50) NOT NULL, -- hashtag, user, keyword
    score REAL NOT NULL DEFAULT 0,
    period_start TIMESTAMP WITH TIME ZONE NOT NULL,
    period_end TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT trending_topics_unique_period UNIQUE (topic, topic_type, period_start)
);

-- User interests for feed algorithm
CREATE TABLE user_interests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    interest_type VARCHAR(50) NOT NULL, -- hashtag, topic, category
    interest_value VARCHAR(200) NOT NULL,
    score REAL DEFAULT 1.0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT user_interests_unique UNIQUE (user_id, interest_type, interest_value)
);

-- =====================================================
-- ADMIN & SYSTEM MANAGEMENT
-- =====================================================

-- System configuration
CREATE TABLE system_config (
    id SERIAL PRIMARY KEY,
    config_key VARCHAR(100) NOT NULL UNIQUE,
    config_value TEXT,
    description TEXT,
    is_public BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Admin action logs
CREATE TABLE admin_action_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    admin_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    action VARCHAR(100) NOT NULL,
    target_type VARCHAR(50),
    target_id UUID,
    details JSONB DEFAULT '{}',
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- TRIGGERS FOR MAINTAINING COUNTS
-- =====================================================

-- Function to update user follower/following counts
CREATE OR REPLACE FUNCTION update_user_relationship_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' AND NEW.relationship_type = 'follow' THEN
        -- Increment following count for follower
        UPDATE users SET following_count = following_count + 1 WHERE id = NEW.follower_id;
        -- Increment followers count for followed user
        UPDATE users SET followers_count = followers_count + 1 WHERE id = NEW.following_id;
    ELSIF TG_OP = 'DELETE' AND OLD.relationship_type = 'follow' THEN
        -- Decrement following count for follower
        UPDATE users SET following_count = following_count - 1 WHERE id = OLD.follower_id;
        -- Decrement followers count for followed user
        UPDATE users SET followers_count = followers_count - 1 WHERE id = OLD.following_id;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_user_relationship_counts
    AFTER INSERT OR DELETE ON user_relationships
    FOR EACH ROW EXECUTE FUNCTION update_user_relationship_counts();

-- Function to update post engagement counts
CREATE OR REPLACE FUNCTION update_post_engagement_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        IF TG_TABLE_NAME = 'post_likes' THEN
            UPDATE posts SET likes_count = likes_count + 1 WHERE id = NEW.post_id;
        ELSIF TG_TABLE_NAME = 'post_comments' THEN
            UPDATE posts SET comments_count = comments_count + 1 WHERE id = NEW.post_id;
        ELSIF TG_TABLE_NAME = 'post_shares' THEN
            UPDATE posts SET shares_count = shares_count + 1 WHERE id = NEW.original_post_id;
        END IF;
    ELSIF TG_OP = 'DELETE' THEN
        IF TG_TABLE_NAME = 'post_likes' THEN
            UPDATE posts SET likes_count = likes_count - 1 WHERE id = OLD.post_id;
        ELSIF TG_TABLE_NAME = 'post_comments' THEN
            UPDATE posts SET comments_count = comments_count - 1 WHERE id = OLD.post_id;
        ELSIF TG_TABLE_NAME = 'post_shares' THEN
            UPDATE posts SET shares_count = shares_count - 1 WHERE id = OLD.original_post_id;
        END IF;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_post_likes_count
    AFTER INSERT OR DELETE ON post_likes
    FOR EACH ROW EXECUTE FUNCTION update_post_engagement_counts();

CREATE TRIGGER trigger_update_post_comments_count
    AFTER INSERT OR DELETE ON post_comments
    FOR EACH ROW EXECUTE FUNCTION update_post_engagement_counts();

CREATE TRIGGER trigger_update_post_shares_count
    AFTER INSERT OR DELETE ON post_shares
    FOR EACH ROW EXECUTE FUNCTION update_post_engagement_counts();

-- Function to update comment reply counts
CREATE OR REPLACE FUNCTION update_comment_reply_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' AND NEW.parent_comment_id IS NOT NULL THEN
        UPDATE post_comments SET replies_count = replies_count + 1 WHERE id = NEW.parent_comment_id;
    ELSIF TG_OP = 'DELETE' AND OLD.parent_comment_id IS NOT NULL THEN
        UPDATE post_comments SET replies_count = replies_count - 1 WHERE id = OLD.parent_comment_id;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_comment_reply_counts
    AFTER INSERT OR DELETE ON post_comments
    FOR EACH ROW EXECUTE FUNCTION update_comment_reply_counts();

-- Function to update comment like counts
CREATE OR REPLACE FUNCTION update_comment_like_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE post_comments SET likes_count = likes_count + 1 WHERE id = NEW.comment_id;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE post_comments SET likes_count = likes_count - 1 WHERE id = OLD.comment_id;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_comment_like_counts
    AFTER INSERT OR DELETE ON comment_likes
    FOR EACH ROW EXECUTE FUNCTION update_comment_like_counts();

-- Function to update user posts count
CREATE OR REPLACE FUNCTION update_user_posts_count()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE users SET posts_count = posts_count + 1 WHERE id = NEW.author_id;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE users SET posts_count = posts_count - 1 WHERE id = OLD.author_id;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_user_posts_count
    AFTER INSERT OR DELETE ON posts
    FOR EACH ROW EXECUTE FUNCTION update_user_posts_count();

-- Function to update hashtag usage counts
CREATE OR REPLACE FUNCTION update_hashtag_usage_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE hashtags SET 
            usage_count = usage_count + 1,
            last_used_at = NOW()
        WHERE id = NEW.hashtag_id;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE hashtags SET usage_count = usage_count - 1 WHERE id = OLD.hashtag_id;
    END IF;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_hashtag_usage_counts
    AFTER INSERT OR DELETE ON post_hashtags
    FOR EACH ROW EXECUTE FUNCTION update_hashtag_usage_counts();

-- Function to update search vectors
CREATE OR REPLACE FUNCTION update_search_vectors()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_TABLE_NAME = 'posts' THEN
        NEW.search_vector := to_tsvector('english', 
            COALESCE(NEW.content, '') || ' ' || 
            COALESCE(NEW.location, '')
        );
    ELSIF TG_TABLE_NAME = 'messages' THEN
        NEW.search_vector := to_tsvector('english', COALESCE(NEW.content, ''));
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_posts_search_vector
    BEFORE INSERT OR UPDATE ON posts
    FOR EACH ROW EXECUTE FUNCTION update_search_vectors();

CREATE TRIGGER trigger_update_messages_search_vector
    BEFORE INSERT OR UPDATE ON messages
    FOR EACH ROW EXECUTE FUNCTION update_search_vectors();

-- Function to update conversation last message timestamp
CREATE OR REPLACE FUNCTION update_conversation_last_message()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE conversations 
        SET last_message_at = NEW.created_at 
        WHERE id = NEW.conversation_id;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_conversation_last_message
    AFTER INSERT ON messages
    FOR EACH ROW EXECUTE FUNCTION update_conversation_last_message();

-- Function to update user activity timestamp
CREATE OR REPLACE FUNCTION update_user_last_active()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE users SET last_active_at = NOW() WHERE id = NEW.user_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_user_last_active_activities
    AFTER INSERT ON user_activities
    FOR EACH ROW EXECUTE FUNCTION update_user_last_active();

CREATE TRIGGER trigger_update_user_last_active_sessions
    AFTER UPDATE ON user_sessions
    FOR EACH ROW 
    WHEN (NEW.last_used_at > OLD.last_used_at)
    EXECUTE FUNCTION update_user_last_active();

-- =====================================================
-- INITIAL SYSTEM CONFIGURATION
-- =====================================================

-- Insert default system configuration
INSERT INTO system_config (config_key, config_value, description, is_public) VALUES
('app_name', 'ChitLaq', 'Application name', true),
('app_version', '1.0.0', 'Current application version', true),
('maintenance_mode', 'false', 'Enable maintenance mode', false),
('registration_enabled', 'true', 'Allow new user registrations', false),
('max_post_length', '2000', 'Maximum characters in a post', true),
('max_comment_length', '500', 'Maximum characters in a comment', true),
('max_bio_length', '160', 'Maximum characters in user bio', true),
('file_upload_max_size', '52428800', 'Maximum file upload size in bytes (50MB)', false),
('session_timeout', '86400', 'Session timeout in seconds (24 hours)', false),
('rate_limit_posts', '10', 'Maximum posts per hour per user', false),
('rate_limit_comments', '30', 'Maximum comments per hour per user', false),
('rate_limit_messages', '100', 'Maximum messages per hour per user', false);

COMMENT ON TABLE users IS 'User accounts with comprehensive profile and security features';
COMMENT ON TABLE user_sessions IS 'Active user sessions for security tracking';
COMMENT ON TABLE university_domains IS 'Approved university domains for email validation';
COMMENT ON TABLE user_relationships IS 'Social relationships between users (follows, blocks, mutes)';
COMMENT ON TABLE friend_suggestions IS 'AI-generated friend suggestions based on mutual connections';
COMMENT ON TABLE posts IS 'User-generated content with full social media features';
COMMENT ON TABLE hashtags IS 'Hashtags for content discovery and trending topics';
COMMENT ON TABLE post_hashtags IS 'Many-to-many relationship between posts and hashtags';
COMMENT ON TABLE post_likes IS 'User likes on posts';
COMMENT ON TABLE post_comments IS 'Comments on posts with nested reply support';
COMMENT ON TABLE comment_likes IS 'User likes on comments';
COMMENT ON TABLE post_shares IS 'Post shares/reposts with optional commentary';
COMMENT ON TABLE conversations IS 'Direct message conversations (1-on-1 and group)';
COMMENT ON TABLE conversation_participants IS 'Users participating in conversations';
COMMENT ON TABLE messages IS 'Messages within conversations';
COMMENT ON TABLE message_read_receipts IS 'Read receipts for messages';
COMMENT ON TABLE notifications IS 'User notifications for various activities';
COMMENT ON TABLE notification_preferences IS 'User notification delivery preferences';
COMMENT ON TABLE reports IS 'Content and user reports for moderation';
COMMENT ON TABLE user_moderation_history IS 'History of moderation actions taken on users';
COMMENT ON TABLE user_activities IS 'User activity tracking for analytics';
COMMENT ON TABLE system_metrics IS 'System performance and usage metrics';
COMMENT ON TABLE trending_topics IS 'Trending hashtags and topics';
COMMENT ON TABLE user_interests IS 'User interests for personalized content';
COMMENT ON TABLE system_config IS 'System-wide configuration settings';
COMMENT ON TABLE admin_action_logs IS 'Audit log of administrative actions';
