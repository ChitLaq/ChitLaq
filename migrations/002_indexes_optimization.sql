-- ChitLaq M1 MVP - Database Indexes and Performance Optimization
-- High-performance indexing strategy for social media workloads
-- Generated by PROMPT 1.3 - Database Schema & Migrations

-- =====================================================
-- PRIMARY INDEXES FOR USERS TABLE
-- =====================================================

-- High-frequency user lookups
CREATE INDEX CONCURRENTLY idx_users_email_active ON users(email) WHERE status = 'active';
CREATE INDEX CONCURRENTLY idx_users_username_active ON users(username) WHERE status = 'active';
CREATE INDEX CONCURRENTLY idx_users_status ON users(status);
CREATE INDEX CONCURRENTLY idx_users_last_active ON users(last_active_at DESC);
CREATE INDEX CONCURRENTLY idx_users_created_at ON users(created_at DESC);

-- University email validation lookups
CREATE INDEX CONCURRENTLY idx_users_university_domain ON users(university_domain) WHERE university_domain IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_users_university_verified ON users(university_verified_at) WHERE university_verified_at IS NOT NULL;

-- User search and discovery
CREATE INDEX CONCURRENTLY idx_users_search_username ON users USING gin(username gin_trgm_ops);
CREATE INDEX CONCURRENTLY idx_users_search_display_name ON users USING gin(display_name gin_trgm_ops);
CREATE INDEX CONCURRENTLY idx_users_followers_count ON users(followers_count DESC) WHERE status = 'active';
CREATE INDEX CONCURRENTLY idx_users_verified_popular ON users(followers_count DESC) WHERE is_verified = true AND status = 'active';

-- Admin and security queries
CREATE INDEX CONCURRENTLY idx_users_admin ON users(id) WHERE is_admin = true;
CREATE INDEX CONCURRENTLY idx_users_locked ON users(locked_until) WHERE locked_until IS NOT NULL AND locked_until > NOW();
CREATE INDEX CONCURRENTLY idx_users_two_factor ON users(id) WHERE two_factor_enabled = true;

-- =====================================================
-- SESSION MANAGEMENT INDEXES
-- =====================================================

CREATE INDEX CONCURRENTLY idx_user_sessions_user_active ON user_sessions(user_id, last_used_at DESC) WHERE is_active = true;
CREATE INDEX CONCURRENTLY idx_user_sessions_token ON user_sessions(token_hash) WHERE is_active = true;
CREATE INDEX CONCURRENTLY idx_user_sessions_expires ON user_sessions(expires_at) WHERE is_active = true;
CREATE INDEX CONCURRENTLY idx_user_sessions_cleanup ON user_sessions(expires_at) WHERE expires_at < NOW() OR is_active = false;

-- =====================================================
-- SOCIAL RELATIONSHIPS INDEXES
-- =====================================================

-- Core relationship queries
CREATE INDEX CONCURRENTLY idx_user_relationships_follower ON user_relationships(follower_id, relationship_type, created_at DESC);
CREATE INDEX CONCURRENTLY idx_user_relationships_following ON user_relationships(following_id, relationship_type, created_at DESC);
CREATE INDEX CONCURRENTLY idx_user_relationships_follow_status ON user_relationships(follower_id, following_id) WHERE relationship_type = 'follow';

-- Mutual connections for suggestions
CREATE INDEX CONCURRENTLY idx_user_relationships_mutual_follow ON user_relationships(following_id, follower_id) WHERE relationship_type = 'follow';

-- Block and mute queries
CREATE INDEX CONCURRENTLY idx_user_relationships_blocks ON user_relationships(follower_id) WHERE relationship_type = 'block';
CREATE INDEX CONCURRENTLY idx_user_relationships_mutes ON user_relationships(follower_id) WHERE relationship_type = 'mute';

-- Friend suggestions optimization
CREATE INDEX CONCURRENTLY idx_friend_suggestions_user_score ON friend_suggestions(user_id, score DESC) WHERE dismissed_at IS NULL;
CREATE INDEX CONCURRENTLY idx_friend_suggestions_cleanup ON friend_suggestions(created_at) WHERE dismissed_at IS NOT NULL OR shown_at IS NOT NULL;

-- =====================================================
-- POSTS AND CONTENT INDEXES
-- =====================================================

-- Core feed queries - most critical for performance
CREATE INDEX CONCURRENTLY idx_posts_author_created ON posts(author_id, created_at DESC) WHERE deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_posts_timeline_public ON posts(created_at DESC) WHERE privacy_level = 'public' AND deleted_at IS NULL AND is_hidden = false;
CREATE INDEX CONCURRENTLY idx_posts_timeline_followers ON posts(created_at DESC) WHERE privacy_level IN ('public', 'followers') AND deleted_at IS NULL AND is_hidden = false;

-- Engagement and trending
CREATE INDEX CONCURRENTLY idx_posts_popular_recent ON posts(likes_count DESC, created_at DESC) WHERE created_at > NOW() - INTERVAL '7 days' AND deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_posts_engagement_score ON posts((likes_count + comments_count * 2 + shares_count * 3) DESC, created_at DESC) WHERE deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_posts_trending ON posts(views_count DESC) WHERE created_at > NOW() - INTERVAL '24 hours' AND deleted_at IS NULL;

-- Content moderation
CREATE INDEX CONCURRENTLY idx_posts_reported ON posts(created_at DESC) WHERE is_reported = true AND deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_posts_hidden ON posts(created_at DESC) WHERE is_hidden = true;

-- Media and location queries
CREATE INDEX CONCURRENTLY idx_posts_media ON posts(created_at DESC) WHERE media_urls IS NOT NULL AND array_length(media_urls, 1) > 0;
CREATE INDEX CONCURRENTLY idx_posts_location ON posts(location, created_at DESC) WHERE location IS NOT NULL;

-- Full-text search
CREATE INDEX CONCURRENTLY idx_posts_search_vector ON posts USING gin(search_vector);
CREATE INDEX CONCURRENTLY idx_posts_search_content ON posts USING gin(content gin_trgm_ops);

-- Tagged users queries
CREATE INDEX CONCURRENTLY idx_posts_tagged_users ON posts USING gin(tagged_users) WHERE tagged_users IS NOT NULL;

-- Privacy and visibility
CREATE INDEX CONCURRENTLY idx_posts_privacy_level ON posts(privacy_level, created_at DESC) WHERE deleted_at IS NULL;

-- =====================================================
-- HASHTAG INDEXES
-- =====================================================

CREATE INDEX CONCURRENTLY idx_hashtags_name ON hashtags(name);
CREATE INDEX CONCURRENTLY idx_hashtags_normalized ON hashtags(normalized_name);
CREATE INDEX CONCURRENTLY idx_hashtags_trending ON hashtags(trending_score DESC, usage_count DESC);
CREATE INDEX CONCURRENTLY idx_hashtags_usage_recent ON hashtags(usage_count DESC) WHERE last_used_at > NOW() - INTERVAL '30 days';

-- Post-hashtag relationships
CREATE INDEX CONCURRENTLY idx_post_hashtags_hashtag_created ON post_hashtags(hashtag_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_post_hashtags_post ON post_hashtags(post_id);

-- =====================================================
-- ENGAGEMENT INDEXES (LIKES, COMMENTS, SHARES)
-- =====================================================

-- Post likes
CREATE INDEX CONCURRENTLY idx_post_likes_post_created ON post_likes(post_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_post_likes_user_created ON post_likes(user_id, created_at DESC);

-- Comments
CREATE INDEX CONCURRENTLY idx_post_comments_post_created ON post_comments(post_id, created_at DESC) WHERE deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_post_comments_author ON post_comments(author_id, created_at DESC) WHERE deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_post_comments_parent ON post_comments(parent_comment_id, created_at ASC) WHERE parent_comment_id IS NOT NULL AND deleted_at IS NULL;
CREATE INDEX CONCURRENTLY idx_post_comments_reported ON post_comments(created_at DESC) WHERE is_reported = true AND deleted_at IS NULL;

-- Comment likes
CREATE INDEX CONCURRENTLY idx_comment_likes_comment ON comment_likes(comment_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_comment_likes_user ON comment_likes(user_id, created_at DESC);

-- Post shares
CREATE INDEX CONCURRENTLY idx_post_shares_original_created ON post_shares(original_post_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_post_shares_user_created ON post_shares(user_id, created_at DESC);

-- =====================================================
-- MESSAGING SYSTEM INDEXES
-- =====================================================

-- Conversations
CREATE INDEX CONCURRENTLY idx_conversations_last_message ON conversations(last_message_at DESC);
CREATE INDEX CONCURRENTLY idx_conversations_created_by ON conversations(created_by, created_at DESC) WHERE created_by IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_conversations_group ON conversations(created_at DESC) WHERE is_group = true;

-- Conversation participants
CREATE INDEX CONCURRENTLY idx_conversation_participants_user ON conversation_participants(user_id, last_read_at DESC) WHERE left_at IS NULL;
CREATE INDEX CONCURRENTLY idx_conversation_participants_conversation ON conversation_participants(conversation_id, joined_at ASC) WHERE left_at IS NULL;
CREATE INDEX CONCURRENTLY idx_conversation_participants_unread ON conversation_participants(user_id, conversation_id) WHERE left_at IS NULL;

-- Messages - critical for chat performance
CREATE INDEX CONCURRENTLY idx_messages_conversation_created ON messages(conversation_id, created_at DESC) WHERE is_deleted = false;
CREATE INDEX CONCURRENTLY idx_messages_sender_created ON messages(sender_id, created_at DESC) WHERE sender_id IS NOT NULL AND is_deleted = false;
CREATE INDEX CONCURRENTLY idx_messages_reply_to ON messages(reply_to_message_id, created_at ASC) WHERE reply_to_message_id IS NOT NULL;

-- Message search
CREATE INDEX CONCURRENTLY idx_messages_search_vector ON messages USING gin(search_vector) WHERE is_deleted = false;
CREATE INDEX CONCURRENTLY idx_messages_search_content ON messages USING gin(content gin_trgm_ops) WHERE content IS NOT NULL AND is_deleted = false;

-- Message read receipts
CREATE INDEX CONCURRENTLY idx_message_read_receipts_message ON message_read_receipts(message_id, read_at DESC);
CREATE INDEX CONCURRENTLY idx_message_read_receipts_user ON message_read_receipts(user_id, read_at DESC);

-- =====================================================
-- NOTIFICATIONS INDEXES
-- =====================================================

CREATE INDEX CONCURRENTLY idx_notifications_user_created ON notifications(user_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_notifications_user_unread ON notifications(user_id, created_at DESC) WHERE is_read = false;
CREATE INDEX CONCURRENTLY idx_notifications_type_created ON notifications(type, created_at DESC);
CREATE INDEX CONCURRENTLY idx_notifications_actor_created ON notifications(actor_id, created_at DESC) WHERE actor_id IS NOT NULL;

-- Notification cleanup
CREATE INDEX CONCURRENTLY idx_notifications_cleanup ON notifications(created_at) WHERE created_at < NOW() - INTERVAL '90 days';

-- Notification preferences
CREATE INDEX CONCURRENTLY idx_notification_preferences_user ON notification_preferences(user_id);

-- =====================================================
-- MODERATION AND REPORTING INDEXES
-- =====================================================

-- Reports
CREATE INDEX CONCURRENTLY idx_reports_status_created ON reports(status, created_at DESC);
CREATE INDEX CONCURRENTLY idx_reports_reporter ON reports(reporter_id, created_at DESC) WHERE reporter_id IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_reports_reported_user ON reports(reported_user_id, created_at DESC) WHERE reported_user_id IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_reports_post ON reports(post_id, created_at DESC) WHERE post_id IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_reports_pending ON reports(created_at ASC) WHERE status = 'pending';

-- Moderation history
CREATE INDEX CONCURRENTLY idx_user_moderation_history_user ON user_moderation_history(user_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_user_moderation_history_moderator ON user_moderation_history(moderator_id, created_at DESC) WHERE moderator_id IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_user_moderation_history_active ON user_moderation_history(user_id, expires_at DESC) WHERE expires_at IS NOT NULL AND expires_at > NOW();

-- =====================================================
-- ANALYTICS AND TRACKING INDEXES
-- =====================================================

-- User activities
CREATE INDEX CONCURRENTLY idx_user_activities_user_created ON user_activities(user_id, created_at DESC) WHERE user_id IS NOT NULL;
CREATE INDEX CONCURRENTLY idx_user_activities_type_created ON user_activities(activity_type, created_at DESC);
CREATE INDEX CONCURRENTLY idx_user_activities_entity ON user_activities(entity_type, entity_id, created_at DESC) WHERE entity_id IS NOT NULL;

-- IP-based analytics
CREATE INDEX CONCURRENTLY idx_user_activities_ip_created ON user_activities(ip_address, created_at DESC) WHERE ip_address IS NOT NULL;

-- Activity cleanup
CREATE INDEX CONCURRENTLY idx_user_activities_cleanup ON user_activities(created_at) WHERE created_at < NOW() - INTERVAL '180 days';

-- System metrics
CREATE INDEX CONCURRENTLY idx_system_metrics_name_created ON system_metrics(metric_name, created_at DESC);
CREATE INDEX CONCURRENTLY idx_system_metrics_tags ON system_metrics USING gin(tags);

-- =====================================================
-- SEARCH AND DISCOVERY INDEXES
-- =====================================================

-- Trending topics
CREATE INDEX CONCURRENTLY idx_trending_topics_score ON trending_topics(score DESC, period_start DESC);
CREATE INDEX CONCURRENTLY idx_trending_topics_type_period ON trending_topics(topic_type, period_start DESC);
CREATE INDEX CONCURRENTLY idx_trending_topics_cleanup ON trending_topics(period_end) WHERE period_end < NOW() - INTERVAL '30 days';

-- User interests
CREATE INDEX CONCURRENTLY idx_user_interests_user_score ON user_interests(user_id, score DESC);
CREATE INDEX CONCURRENTLY idx_user_interests_type_value ON user_interests(interest_type, interest_value, score DESC);

-- =====================================================
-- ADMIN AND SYSTEM INDEXES
-- =====================================================

-- System configuration
CREATE INDEX CONCURRENTLY idx_system_config_key ON system_config(config_key);
CREATE INDEX CONCURRENTLY idx_system_config_public ON system_config(config_key) WHERE is_public = true;

-- Admin action logs
CREATE INDEX CONCURRENTLY idx_admin_action_logs_admin ON admin_action_logs(admin_id, created_at DESC);
CREATE INDEX CONCURRENTLY idx_admin_action_logs_action ON admin_action_logs(action, created_at DESC);
CREATE INDEX CONCURRENTLY idx_admin_action_logs_target ON admin_action_logs(target_type, target_id, created_at DESC) WHERE target_id IS NOT NULL;

-- =====================================================
-- UNIVERSITY DOMAINS INDEX
-- =====================================================

CREATE INDEX CONCURRENTLY idx_university_domains_domain ON university_domains(domain) WHERE is_active = true;
CREATE INDEX CONCURRENTLY idx_university_domains_country ON university_domains(country_code) WHERE is_active = true;

-- =====================================================
-- COMPOSITE INDEXES FOR COMPLEX QUERIES
-- =====================================================

-- Feed generation - critical performance index
CREATE INDEX CONCURRENTLY idx_posts_feed_generation ON posts(author_id, privacy_level, created_at DESC) WHERE deleted_at IS NULL AND is_hidden = false;

-- User timeline with privacy
CREATE INDEX CONCURRENTLY idx_posts_user_timeline ON posts(author_id, privacy_level, created_at DESC) WHERE deleted_at IS NULL;

-- Popular content discovery
CREATE INDEX CONCURRENTLY idx_posts_popular_content ON posts(privacy_level, likes_count DESC, created_at DESC) WHERE privacy_level = 'public' AND deleted_at IS NULL AND created_at > NOW() - INTERVAL '7 days';

-- Recent active users
CREATE INDEX CONCURRENTLY idx_users_recent_active ON users(last_active_at DESC, status) WHERE status = 'active' AND last_active_at > NOW() - INTERVAL '30 days';

-- Comment threads
CREATE INDEX CONCURRENTLY idx_comments_thread_navigation ON post_comments(post_id, parent_comment_id, created_at ASC) WHERE deleted_at IS NULL;

-- Conversation listing with last message
CREATE INDEX CONCURRENTLY idx_conversations_user_activity ON conversation_participants(user_id, conversation_id) INCLUDE (last_read_at) WHERE left_at IS NULL;

-- Message history pagination
CREATE INDEX CONCURRENTLY idx_messages_conversation_pagination ON messages(conversation_id, id DESC, created_at DESC) WHERE is_deleted = false;

-- Notification delivery optimization
CREATE INDEX CONCURRENTLY idx_notifications_delivery ON notifications(user_id, type, is_read, created_at DESC);

-- Report triage
CREATE INDEX CONCURRENTLY idx_reports_triage ON reports(status, report_type, created_at ASC);

-- User engagement metrics
CREATE INDEX CONCURRENTLY idx_user_engagement_metrics ON users(status, followers_count DESC, posts_count DESC, last_active_at DESC) WHERE status = 'active';

-- =====================================================
-- PARTIAL INDEXES FOR PERFORMANCE
-- =====================================================

-- Active sessions only
CREATE INDEX CONCURRENTLY idx_user_sessions_active_only ON user_sessions(user_id, last_used_at DESC) WHERE is_active = true AND expires_at > NOW();

-- Unread notifications only
CREATE INDEX CONCURRENTLY idx_notifications_unread_only ON notifications(user_id, created_at DESC) WHERE is_read = false;

-- Public posts only (for discovery)
CREATE INDEX CONCURRENTLY idx_posts_public_only ON posts(created_at DESC, likes_count DESC) WHERE privacy_level = 'public' AND deleted_at IS NULL AND is_hidden = false;

-- Verified users only
CREATE INDEX CONCURRENTLY idx_users_verified_only ON users(followers_count DESC, created_at DESC) WHERE is_verified = true AND status = 'active';

-- Recent messages only
CREATE INDEX CONCURRENTLY idx_messages_recent_only ON messages(conversation_id, created_at DESC) WHERE created_at > NOW() - INTERVAL '30 days' AND is_deleted = false;

-- Pending reports only
CREATE INDEX CONCURRENTLY idx_reports_pending_only ON reports(created_at ASC, report_type) WHERE status = 'pending';

-- =====================================================
-- UNIQUE CONSTRAINTS AND EXCLUSION CONSTRAINTS
-- =====================================================

-- Prevent duplicate active sessions for same device
CREATE UNIQUE INDEX CONCURRENTLY idx_user_sessions_unique_device ON user_sessions(user_id, md5(user_agent)) WHERE is_active = true;

-- Ensure unique hashtag names (case-insensitive)
CREATE UNIQUE INDEX CONCURRENTLY idx_hashtags_unique_normalized ON hashtags(lower(normalized_name));

-- Prevent duplicate notifications for same event
CREATE UNIQUE INDEX CONCURRENTLY idx_notifications_unique_event ON notifications(user_id, type, actor_id, post_id, comment_id) WHERE actor_id IS NOT NULL;

-- =====================================================
-- STATISTICS AND MAINTENANCE
-- =====================================================

-- Update table statistics for query planner
ANALYZE users;
ANALYZE posts;
ANALYZE user_relationships;
ANALYZE post_likes;
ANALYZE post_comments;
ANALYZE conversations;
ANALYZE messages;
ANALYZE notifications;
ANALYZE hashtags;
ANALYZE post_hashtags;

-- Set statistics targets for frequently queried columns
ALTER TABLE users ALTER COLUMN username SET STATISTICS 1000;
ALTER TABLE users ALTER COLUMN email SET STATISTICS 1000;
ALTER TABLE posts ALTER COLUMN content SET STATISTICS 1000;
ALTER TABLE messages ALTER COLUMN content SET STATISTICS 1000;
ALTER TABLE hashtags ALTER COLUMN name SET STATISTICS 1000;

-- =====================================================
-- INDEX USAGE MONITORING
-- =====================================================

-- Create view for monitoring index usage
CREATE OR REPLACE VIEW index_usage_stats AS
SELECT
    schemaname,
    tablename,
    indexname,
    idx_tup_read,
    idx_tup_fetch,
    idx_scan,
    CASE 
        WHEN idx_scan = 0 THEN 'Unused'
        WHEN idx_scan < 100 THEN 'Low Usage'
        WHEN idx_scan < 1000 THEN 'Medium Usage'
        ELSE 'High Usage'
    END AS usage_category
FROM pg_stat_user_indexes
WHERE schemaname = 'public'
ORDER BY idx_scan DESC;

-- Create view for table size monitoring
CREATE OR REPLACE VIEW table_size_stats AS
SELECT
    schemaname,
    tablename,
    pg_size_pretty(pg_total_relation_size(tablename::regclass)) AS total_size,
    pg_size_pretty(pg_relation_size(tablename::regclass)) AS table_size,
    pg_size_pretty(pg_total_relation_size(tablename::regclass) - pg_relation_size(tablename::regclass)) AS index_size,
    pg_stat_user_tables.n_tup_ins,
    pg_stat_user_tables.n_tup_upd,
    pg_stat_user_tables.n_tup_del
FROM pg_tables
LEFT JOIN pg_stat_user_tables ON pg_tables.tablename = pg_stat_user_tables.relname
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(tablename::regclass) DESC;

-- Performance monitoring comments
COMMENT ON VIEW index_usage_stats IS 'Monitor index usage patterns to identify unused or underutilized indexes';
COMMENT ON VIEW table_size_stats IS 'Monitor table and index sizes for capacity planning and optimization';
