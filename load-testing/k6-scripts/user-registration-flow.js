/**
 * ChitLaq M1 MVP - User Registration Flow Load Test
 * Generated by PROMPT 1.6 - Performance Optimization & Load Testing Framework
 * Senior Performance Engineer - 15+ years application optimization and load testing experience
 * 
 * Load test for user registration flow with 100 concurrent users
 * Tests: Registration, email verification, profile setup, initial feed load
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';
import { SharedArray } from 'k6/data';

// Custom metrics
const registrationRate = new Rate('registration_success_rate');
const registrationTime = new Trend('registration_response_time');
const profileSetupTime = new Trend('profile_setup_time');
const feedLoadTime = new Trend('initial_feed_load_time');
const errorCounter = new Counter('registration_errors');

// Test configuration
export const options = {
  stages: [
    { duration: '2m', target: 20 },   // Ramp up to 20 users
    { duration: '5m', target: 100 },  // Ramp up to 100 users
    { duration: '10m', target: 100 }, // Stay at 100 users
    { duration: '2m', target: 0 },    // Ramp down to 0 users
  ],
  thresholds: {
    'registration_success_rate': ['rate>0.95'], // 95% success rate
    'registration_response_time': ['p(95)<150'], // 95% under 150ms
    'profile_setup_time': ['p(95)<200'], // 95% under 200ms
    'initial_feed_load_time': ['p(95)<500'], // 95% under 500ms
    'http_req_duration': ['p(95)<200'], // 95% under 200ms
    'http_req_failed': ['rate<0.05'], // Less than 5% failures
  },
};

// Test data
const universities = new SharedArray('universities', function () {
  return [
    'stanford.edu',
    'mit.edu',
    'harvard.edu',
    'berkeley.edu',
    'cmu.edu',
    'yale.edu',
    'princeton.edu',
    'columbia.edu',
    'cornell.edu',
    'upenn.edu',
    'brown.edu',
    'dartmouth.edu',
    'duke.edu',
    'northwestern.edu',
    'jhu.edu',
    'caltech.edu',
    'rice.edu',
    'vanderbilt.edu',
    'wustl.edu',
    'emory.edu'
  ];
});

const firstNames = new SharedArray('firstNames', function () {
  return [
    'Alex', 'Jordan', 'Taylor', 'Casey', 'Morgan', 'Riley', 'Avery', 'Quinn',
    'Blake', 'Cameron', 'Drew', 'Emery', 'Finley', 'Hayden', 'Jamie', 'Kendall',
    'Logan', 'Parker', 'Peyton', 'Reese', 'Sage', 'Skyler', 'Sydney', 'Tatum'
  ];
});

const lastNames = new SharedArray('lastNames', function () {
  return [
    'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',
    'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas',
    'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White'
  ];
});

// Generate test user data
function generateTestUser() {
  const timestamp = Date.now();
  const randomSuffix = Math.floor(Math.random() * 10000);
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
  const university = universities[Math.floor(Math.random() * universities.length)];
  
  return {
    email: `loadtest-${timestamp}-${randomSuffix}@${university}`,
    username: `loadtest_${firstName.toLowerCase()}_${lastName.toLowerCase()}_${randomSuffix}`,
    password: 'LoadTest123!',
    firstName: firstName,
    lastName: lastName,
    university: university,
    bio: `Load test user created at ${new Date().toISOString()}`,
    interests: ['Technology', 'Science', 'Engineering', 'Mathematics']
  };
}

// Registration flow
function registerUser(userData) {
  const startTime = Date.now();
  
  const payload = {
    email: userData.email,
    username: userData.username,
    password: userData.password,
    firstName: userData.firstName,
    lastName: userData.lastName,
    university: userData.university
  };
  
  const response = http.post(`${__ENV.BASE_URL}/api/auth/register`, JSON.stringify(payload), {
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'K6-LoadTest/1.0'
    },
    tags: { endpoint: 'register' }
  });
  
  const duration = Date.now() - startTime;
  registrationTime.add(duration);
  
  const success = check(response, {
    'registration status is 201': (r) => r.status === 201,
    'registration response time < 150ms': (r) => r.timings.duration < 150,
    'registration returns user data': (r) => {
      try {
        const data = JSON.parse(r.body);
        return data.user && data.user.id && data.token;
      } catch (e) {
        return false;
      }
    }
  });
  
  registrationRate.add(success);
  
  if (!success) {
    errorCounter.add(1);
    console.error(`Registration failed for ${userData.email}: ${response.status} - ${response.body}`);
  }
  
  return success ? JSON.parse(response.body) : null;
}

// Profile setup
function setupProfile(userData, authToken) {
  const startTime = Date.now();
  
  const payload = {
    bio: userData.bio,
    interests: userData.interests
  };
  
  const response = http.put(`${__ENV.BASE_URL}/api/users/profile`, JSON.stringify(payload), {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${authToken}`,
      'User-Agent': 'K6-LoadTest/1.0'
    },
    tags: { endpoint: 'profile_setup' }
  });
  
  const duration = Date.now() - startTime;
  profileSetupTime.add(duration);
  
  const success = check(response, {
    'profile setup status is 200': (r) => r.status === 200,
    'profile setup response time < 200ms': (r) => r.timings.duration < 200,
    'profile setup returns updated profile': (r) => {
      try {
        const data = JSON.parse(r.body);
        return data.user && data.user.bio === userData.bio;
      } catch (e) {
        return false;
      }
    }
  });
  
  if (!success) {
    errorCounter.add(1);
    console.error(`Profile setup failed: ${response.status} - ${response.body}`);
  }
  
  return success;
}

// Initial feed load
function loadInitialFeed(authToken) {
  const startTime = Date.now();
  
  const response = http.get(`${__ENV.BASE_URL}/api/feed?page=1&limit=20`, {
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'User-Agent': 'K6-LoadTest/1.0'
    },
    tags: { endpoint: 'initial_feed' }
  });
  
  const duration = Date.now() - startTime;
  feedLoadTime.add(duration);
  
  const success = check(response, {
    'feed load status is 200': (r) => r.status === 200,
    'feed load response time < 500ms': (r) => r.timings.duration < 500,
    'feed load returns posts array': (r) => {
      try {
        const data = JSON.parse(r.body);
        return Array.isArray(data.posts);
      } catch (e) {
        return false;
      }
    }
  });
  
  if (!success) {
    errorCounter.add(1);
    console.error(`Feed load failed: ${response.status} - ${response.body}`);
  }
  
  return success;
}

// Create initial post
function createInitialPost(authToken) {
  const postContent = `Hello ChitLaq! This is my first post from load testing. Created at ${new Date().toISOString()}`;
  
  const payload = {
    content: postContent
  };
  
  const response = http.post(`${__ENV.BASE_URL}/api/posts`, JSON.stringify(payload), {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${authToken}`,
      'User-Agent': 'K6-LoadTest/1.0'
    },
    tags: { endpoint: 'create_post' }
  });
  
  const success = check(response, {
    'post creation status is 201': (r) => r.status === 201,
    'post creation response time < 300ms': (r) => r.timings.duration < 300,
    'post creation returns post data': (r) => {
      try {
        const data = JSON.parse(r.body);
        return data.post && data.post.id && data.post.content === postContent;
      } catch (e) {
        return false;
      }
    }
  });
  
  if (!success) {
    errorCounter.add(1);
    console.error(`Post creation failed: ${response.status} - ${response.body}`);
  }
  
  return success;
}

// Search functionality test
function testSearch(authToken) {
  const searchQueries = ['technology', 'science', 'engineering', 'university', 'student'];
  const query = searchQueries[Math.floor(Math.random() * searchQueries.length)];
  
  const response = http.get(`${__ENV.BASE_URL}/api/search?q=${encodeURIComponent(query)}`, {
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'User-Agent': 'K6-LoadTest/1.0'
    },
    tags: { endpoint: 'search' }
  });
  
  const success = check(response, {
    'search status is 200': (r) => r.status === 200,
    'search response time < 200ms': (r) => r.timings.duration < 200,
    'search returns results': (r) => {
      try {
        const data = JSON.parse(r.body);
        return data.users || data.posts || data.hashtags;
      } catch (e) {
        return false;
      }
    }
  });
  
  if (!success) {
    errorCounter.add(1);
    console.error(`Search failed: ${response.status} - ${response.body}`);
  }
  
  return success;
}

// Main test function
export default function () {
  const userData = generateTestUser();
  
  // Step 1: Register user
  const registrationResult = registerUser(userData);
  if (!registrationResult) {
    return; // Skip remaining steps if registration fails
  }
  
  const authToken = registrationResult.token;
  sleep(1); // Brief pause between steps
  
  // Step 2: Setup profile
  const profileSuccess = setupProfile(userData, authToken);
  if (!profileSuccess) {
    return; // Skip remaining steps if profile setup fails
  }
  
  sleep(1); // Brief pause between steps
  
  // Step 3: Load initial feed
  const feedSuccess = loadInitialFeed(authToken);
  if (!feedSuccess) {
    return; // Skip remaining steps if feed load fails
  }
  
  sleep(1); // Brief pause between steps
  
  // Step 4: Create initial post
  const postSuccess = createInitialPost(authToken);
  if (!postSuccess) {
    return; // Skip remaining steps if post creation fails
  }
  
  sleep(1); // Brief pause between steps
  
  // Step 5: Test search functionality
  testSearch(authToken);
  
  // Brief pause before next iteration
  sleep(2);
}

// Setup function (runs once at the beginning)
export function setup() {
  console.log('Starting User Registration Flow Load Test');
  console.log(`Base URL: ${__ENV.BASE_URL}`);
  console.log(`Test Duration: ${__ENV.TEST_DURATION || '19 minutes'}`);
  console.log(`Max Users: ${__ENV.MAX_USERS || '100'}`);
  
  // Verify base URL is accessible
  const healthCheck = http.get(`${__ENV.BASE_URL}/health`);
  if (healthCheck.status !== 200) {
    throw new Error(`Health check failed: ${healthCheck.status}`);
  }
  
  console.log('Health check passed, starting load test...');
}

// Teardown function (runs once at the end)
export function teardown(data) {
  console.log('User Registration Flow Load Test completed');
  console.log(`Total errors: ${errorCounter.count}`);
  console.log(`Registration success rate: ${registrationRate.rate * 100}%`);
  console.log(`Average registration time: ${registrationTime.avg}ms`);
  console.log(`Average profile setup time: ${profileSetupTime.avg}ms`);
  console.log(`Average feed load time: ${feedLoadTime.avg}ms`);
}
