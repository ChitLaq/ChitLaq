#!/bin/bash

# ChitLaq M1 MVP - SSL/TLS Setup with Let's Encrypt
# Automated SSL certificate generation and renewal
# Generated by PROMPT 1.2 - Security Configuration Setup

set -e  # Exit on any error
set -u  # Exit on undefined variables
set -o pipefail  # Exit on pipe failures

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENV_FILE="${PROJECT_ROOT}/.env"

# Default values
STAGING=${1:-false}
FORCE_RENEWAL=${2:-false}
DOMAIN_LIST=${3:-""}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${PURPLE}[INFO]${NC} $1"
}

# Print SSL setup banner
print_banner() {
    echo -e "${PURPLE}"
    echo "  ____  ____  _       ____       _               "
    echo " / ___||  _ \| |     / ___|  ___| |_ _   _ _ __   "
    echo " \___ \| (_) | |     \___ \ / _ \ __| | | | '_ \  "
    echo "  ___) |__  /| |___   ___) |  __/ |_| |_| | |_) | "
    echo " |____/   /_/|_____| |____/ \___|\__|\__,_| .__/  "
    echo "                                          |_|     "
    echo ""
    echo "ChitLaq SSL/TLS Configuration"
    echo "Let's Encrypt Certificate Management"
    echo "===================================="
    echo -e "${NC}"
}

# Load environment configuration
load_environment() {
    log "Loading environment configuration..."
    
    if [ -f "$ENV_FILE" ]; then
        source "$ENV_FILE"
    else
        error "Environment file not found: $ENV_FILE"
        error "Please ensure .env file exists with SSL configuration"
        exit 1
    fi
    
    # Set default values from environment
    DOMAIN=${DOMAIN:-chitlaq.com}
    SSL_EMAIL=${SSL_EMAIL:-admin@chitlaq.com}
    SSL_STAGING=${SSL_STAGING:-false}
    
    # Override staging if parameter provided
    if [ "$STAGING" = "true" ]; then
        SSL_STAGING=true
    fi
    
    # Build domain list
    if [ -n "$DOMAIN_LIST" ]; then
        DOMAINS="$DOMAIN_LIST"
    else
        DOMAINS="$DOMAIN"
        if [ -n "${ADDITIONAL_DOMAINS:-}" ]; then
            DOMAINS="$DOMAINS,$ADDITIONAL_DOMAINS"
        fi
        # Add standard subdomains
        DOMAINS="$DOMAINS,api.$DOMAIN,grafana.$DOMAIN,studio.$DOMAIN"
    fi
    
    success "Environment configuration loaded"
}

# Check prerequisites
check_prerequisites() {
    log "Checking SSL setup prerequisites..."
    
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
    
    # Check if Certbot is installed
    if ! command -v certbot >/dev/null 2>&1; then
        log "Installing Certbot..."
        
        # Detect OS and install accordingly
        if [ -f /etc/debian_version ]; then
            # Debian/Ubuntu
            apt-get update
            apt-get install -y certbot python3-certbot-nginx
        elif [ -f /etc/redhat-release ]; then
            # RHEL/CentOS/Fedora
            if command -v dnf >/dev/null 2>&1; then
                dnf install -y certbot python3-certbot-nginx
            else
                yum install -y certbot python3-certbot-nginx
            fi
        else
            error "Unsupported operating system. Please install Certbot manually."
            exit 1
        fi
        
        success "Certbot installed successfully"
    else
        success "Certbot is already installed"
    fi
    
    # Check if Nginx is running
    if ! systemctl is-active --quiet nginx 2>/dev/null; then
        if command -v nginx >/dev/null 2>&1; then
            log "Starting Nginx..."
            systemctl start nginx
        else
            error "Nginx is not installed or not running"
            error "Please ensure Nginx is properly installed and configured"
            exit 1
        fi
    fi
    
    # Create SSL directory
    mkdir -p /etc/nginx/ssl
    mkdir -p "${PROJECT_ROOT}/ssl"
    
    success "Prerequisites check passed"
}

# Validate domain DNS
validate_domains() {
    log "Validating domain DNS configuration..."
    
    IFS=',' read -ra DOMAIN_ARRAY <<< "$DOMAINS"
    local failed_domains=()
    
    for domain in "${DOMAIN_ARRAY[@]}"; do
        domain=$(echo "$domain" | xargs)  # Trim whitespace
        
        if [ -z "$domain" ]; then
            continue
        fi
        
        log "Checking DNS for $domain..."
        
        # Check if domain resolves to this server's IP
        local domain_ip
        domain_ip=$(dig +short "$domain" 2>/dev/null | tail -n1)
        
        if [ -z "$domain_ip" ]; then
            warning "⚠️  DNS resolution failed for $domain"
            failed_domains+=("$domain")
        else
            # Get server's public IP
            local server_ip
            server_ip=$(curl -s ifconfig.me 2>/dev/null || curl -s icanhazip.com 2>/dev/null || echo "unknown")
            
            if [ "$domain_ip" = "$server_ip" ]; then
                success "✓ DNS correctly configured for $domain ($domain_ip)"
            else
                warning "⚠️  DNS mismatch for $domain: points to $domain_ip, server is $server_ip"
                failed_domains+=("$domain")
            fi
        fi
        
        # Test HTTP connectivity
        if curl -Is "http://$domain/.well-known/acme-challenge/test" -m 10 >/dev/null 2>&1; then
            success "✓ HTTP connectivity test passed for $domain"
        else
            warning "⚠️  HTTP connectivity test failed for $domain"
        fi
    done
    
    if [ ${#failed_domains[@]} -gt 0 ]; then
        warning "DNS validation failed for domains: ${failed_domains[*]}"
        warning "SSL certificate generation may fail for these domains"
        
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error "SSL setup aborted due to DNS validation failures"
            exit 1
        fi
    fi
}

# Configure Nginx for ACME challenge
configure_nginx_acme() {
    log "Configuring Nginx for ACME challenge..."
    
    # Create temporary Nginx configuration for ACME
    cat > /etc/nginx/sites-available/acme-challenge << 'EOF'
server {
    listen 80;
    server_name _;
    
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }
    
    location / {
        return 301 https://$host$request_uri;
    }
}
EOF
    
    # Enable the site
    ln -sf /etc/nginx/sites-available/acme-challenge /etc/nginx/sites-enabled/
    
    # Create web root for ACME challenge
    mkdir -p /var/www/html/.well-known/acme-challenge
    chown -R www-data:www-data /var/www/html
    
    # Test Nginx configuration
    if nginx -t; then
        success "Nginx configuration is valid"
        systemctl reload nginx
    else
        error "Nginx configuration is invalid"
        exit 1
    fi
}

# Generate SSL certificates
generate_certificates() {
    log "Generating SSL certificates with Let's Encrypt..."
    
    # Build domain arguments for Certbot
    IFS=',' read -ra DOMAIN_ARRAY <<< "$DOMAINS"
    local domain_args=""
    
    for domain in "${DOMAIN_ARRAY[@]}"; do
        domain=$(echo "$domain" | xargs)  # Trim whitespace
        if [ -n "$domain" ]; then
            domain_args="$domain_args -d $domain"
        fi
    done
    
    # Prepare Certbot command
    local certbot_cmd="certbot certonly"
    certbot_cmd="$certbot_cmd --webroot"
    certbot_cmd="$certbot_cmd --webroot-path=/var/www/html"
    certbot_cmd="$certbot_cmd --email $SSL_EMAIL"
    certbot_cmd="$certbot_cmd --agree-tos"
    certbot_cmd="$certbot_cmd --non-interactive"
    
    # Add staging flag if requested
    if [ "$SSL_STAGING" = "true" ]; then
        certbot_cmd="$certbot_cmd --staging"
        warning "Using Let's Encrypt staging environment"
    fi
    
    # Add force renewal if requested
    if [ "$FORCE_RENEWAL" = "true" ]; then
        certbot_cmd="$certbot_cmd --force-renewal"
        warning "Forcing certificate renewal"
    fi
    
    # Add domains
    certbot_cmd="$certbot_cmd $domain_args"
    
    log "Running: $certbot_cmd"
    
    # Run Certbot
    if eval "$certbot_cmd"; then
        success "SSL certificates generated successfully"
    else
        error "SSL certificate generation failed"
        
        # Show detailed error information
        error "Common causes:"
        error "  1. DNS not pointing to this server"
        error "  2. Port 80 not accessible from internet"
        error "  3. Firewall blocking HTTP traffic"
        error "  4. Rate limiting (try --staging first)"
        
        exit 1
    fi
}

# Install certificates to project
install_certificates() {
    log "Installing certificates to project directory..."
    
    local primary_domain
    IFS=',' read -ra DOMAIN_ARRAY <<< "$DOMAINS"
    primary_domain=$(echo "${DOMAIN_ARRAY[0]}" | xargs)
    
    local cert_dir="/etc/letsencrypt/live/$primary_domain"
    local project_ssl_dir="${PROJECT_ROOT}/ssl"
    
    if [ ! -d "$cert_dir" ]; then
        error "Certificate directory not found: $cert_dir"
        exit 1
    fi
    
    # Create SSL directories for each domain
    for domain in "${DOMAIN_ARRAY[@]}"; do
        domain=$(echo "$domain" | xargs)
        if [ -n "$domain" ]; then
            local domain_ssl_dir="$project_ssl_dir/$domain"
            mkdir -p "$domain_ssl_dir"
            
            # Copy certificates
            cp "$cert_dir/fullchain.pem" "$domain_ssl_dir/"
            cp "$cert_dir/privkey.pem" "$domain_ssl_dir/"
            
            # Set proper permissions
            chmod 644 "$domain_ssl_dir/fullchain.pem"
            chmod 600 "$domain_ssl_dir/privkey.pem"
            chown root:root "$domain_ssl_dir"/*.pem
            
            success "Certificates installed for $domain"
        fi
    done
    
    # Create symbolic links for Nginx
    mkdir -p /etc/nginx/ssl
    for domain in "${DOMAIN_ARRAY[@]}"; do
        domain=$(echo "$domain" | xargs)
        if [ -n "$domain" ]; then
            ln -sf "$cert_dir/fullchain.pem" "/etc/nginx/ssl/$domain.crt"
            ln -sf "$cert_dir/privkey.pem" "/etc/nginx/ssl/$domain.key"
        fi
    done
    
    success "Certificates installed and linked"
}

# Generate DH parameters for stronger security
generate_dhparam() {
    log "Generating DH parameters for enhanced security..."
    
    local dhparam_file="/etc/nginx/ssl/dhparam.pem"
    
    if [ ! -f "$dhparam_file" ] || [ "$FORCE_RENEWAL" = "true" ]; then
        # Generate 2048-bit DH parameters (4096-bit takes too long)
        openssl dhparam -out "$dhparam_file" 2048
        chmod 644 "$dhparam_file"
        success "DH parameters generated"
    else
        success "DH parameters already exist"
    fi
}

# Configure automatic renewal
setup_auto_renewal() {
    log "Setting up automatic certificate renewal..."
    
    # Create renewal script
    cat > /usr/local/bin/chitlaq-ssl-renew << 'EOF'
#!/bin/bash
# ChitLaq SSL Certificate Renewal Script

# Renew certificates
/usr/bin/certbot renew --quiet --post-hook "systemctl reload nginx"

# Check renewal status
if [ $? -eq 0 ]; then
    echo "$(date): SSL certificates renewed successfully" >> /var/log/chitlaq-ssl-renewal.log
else
    echo "$(date): SSL certificate renewal failed" >> /var/log/chitlaq-ssl-renewal.log
    # Send alert email (if configured)
    if command -v mail >/dev/null 2>&1; then
        echo "SSL certificate renewal failed on $(hostname)" | mail -s "SSL Renewal Failed" admin@chitlaq.com
    fi
fi
EOF
    
    chmod +x /usr/local/bin/chitlaq-ssl-renew
    
    # Add to crontab (run twice daily)
    local cron_line="0 */12 * * * /usr/local/bin/chitlaq-ssl-renew"
    
    # Check if cron job already exists
    if ! crontab -l 2>/dev/null | grep -q "chitlaq-ssl-renew"; then
        (crontab -l 2>/dev/null; echo "$cron_line") | crontab -
        success "Auto-renewal cron job configured"
    else
        success "Auto-renewal cron job already exists"
    fi
    
    # Test renewal (dry run)
    log "Testing certificate renewal (dry run)..."
    if certbot renew --dry-run --quiet; then
        success "Certificate renewal test passed"
    else
        warning "Certificate renewal test failed"
    fi
}

# Verify SSL configuration
verify_ssl() {
    log "Verifying SSL configuration..."
    
    IFS=',' read -ra DOMAIN_ARRAY <<< "$DOMAINS"
    local primary_domain
    primary_domain=$(echo "${DOMAIN_ARRAY[0]}" | xargs)
    
    # Test SSL connectivity
    if openssl s_client -connect "$primary_domain:443" -servername "$primary_domain" </dev/null 2>/dev/null | grep -q "CONNECTED"; then
        success "✓ SSL connection test passed"
    else
        warning "⚠️  SSL connection test failed (Nginx may not be configured yet)"
    fi
    
    # Check certificate expiration
    local cert_file="/etc/letsencrypt/live/$primary_domain/cert.pem"
    if [ -f "$cert_file" ]; then
        local expiry_date
        expiry_date=$(openssl x509 -in "$cert_file" -noout -dates | grep "notAfter" | cut -d= -f2)
        success "✓ Certificate expires: $expiry_date"
    fi
    
    # Generate SSL configuration snippet
    generate_ssl_config
}

# Generate SSL configuration for Nginx
generate_ssl_config() {
    log "Generating SSL configuration snippet..."
    
    cat > "${PROJECT_ROOT}/nginx/ssl-config.conf" << 'EOF'
# ChitLaq SSL/TLS Configuration
# Generated by ssl-setup.sh

# SSL protocols and ciphers
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;
ssl_prefer_server_ciphers off;

# SSL session settings
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_session_tickets off;

# SSL security enhancements
ssl_stapling on;
ssl_stapling_verify on;
ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# Security headers
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# OCSP settings
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
EOF
    
    success "SSL configuration snippet generated: nginx/ssl-config.conf"
}

# Show SSL summary
show_ssl_summary() {
    echo ""
    echo -e "${GREEN}================================================${NC}"
    echo -e "${GREEN}🔒 ChitLaq SSL/TLS Setup Complete!${NC}"
    echo -e "${GREEN}================================================${NC}"
    echo ""
    echo -e "${BLUE}📋 Certificate Information:${NC}"
    
    IFS=',' read -ra DOMAIN_ARRAY <<< "$DOMAINS"
    for domain in "${DOMAIN_ARRAY[@]}"; do
        domain=$(echo "$domain" | xargs)
        if [ -n "$domain" ]; then
            echo "  🌐 $domain"
        fi
    done
    
    echo ""
    echo -e "${BLUE}📁 Certificate Locations:${NC}"
    echo "  📄 Let's Encrypt: /etc/letsencrypt/live/"
    echo "  📄 Project SSL: ${PROJECT_ROOT}/ssl/"
    echo "  📄 Nginx SSL: /etc/nginx/ssl/"
    echo ""
    echo -e "${BLUE}🔄 Auto-Renewal:${NC}"
    echo "  ⏰ Configured to run twice daily"
    echo "  📝 Logs: /var/log/chitlaq-ssl-renewal.log"
    echo "  🧪 Test: certbot renew --dry-run"
    echo ""
    echo -e "${BLUE}⚙️  Next Steps:${NC}"
    echo "  1. Update Nginx configuration to use SSL"
    echo "  2. Test HTTPS connectivity"
    echo "  3. Configure firewall for HTTPS (port 443)"
    echo "  4. Update DNS CAA records (optional)"
    echo "  5. Submit domains to HSTS preload list"
    echo ""
    echo -e "${BLUE}🧪 SSL Testing:${NC}"
    echo "  🔗 SSL Labs: https://www.ssllabs.com/ssltest/"
    echo "  🔗 Security Headers: https://securityheaders.com/"
    echo ""
    
    if [ "$SSL_STAGING" = "true" ]; then
        echo -e "${YELLOW}⚠️  STAGING CERTIFICATES GENERATED${NC}"
        echo -e "${YELLOW}Run with 'false' as first argument for production certificates${NC}"
        echo ""
    fi
    
    echo -e "${GREEN}✅ SSL Configuration: SUCCESS${NC}"
    echo ""
}

# Show help
show_help() {
    echo "ChitLaq SSL/TLS Setup Script"
    echo ""
    echo "Usage: $0 [staging] [force_renewal] [domain_list]"
    echo ""
    echo "Arguments:"
    echo "  staging       Use Let's Encrypt staging (true|false) [default: false]"
    echo "  force_renewal Force certificate renewal (true|false) [default: false]"
    echo "  domain_list   Comma-separated domain list [default: from .env]"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Generate production certificates"
    echo "  $0 true                               # Generate staging certificates"
    echo "  $0 false true                         # Force renewal of production certificates"
    echo "  $0 false false \"chitlaq.com,api.chitlaq.com\"  # Specific domains"
    echo ""
    echo "Prerequisites:"
    echo "  - Run as root (sudo)"
    echo "  - DNS pointing to this server"
    echo "  - Port 80 accessible from internet"
    echo "  - Nginx installed and running"
}

# Main SSL setup function
main() {
    print_banner
    
    # Load configuration
    load_environment
    
    # Check prerequisites
    check_prerequisites
    
    # Validate domains
    validate_domains
    
    # Configure Nginx for ACME
    configure_nginx_acme
    
    # Generate certificates
    generate_certificates
    
    # Install certificates
    install_certificates
    
    # Generate DH parameters
    generate_dhparam
    
    # Setup auto-renewal
    setup_auto_renewal
    
    # Verify configuration
    verify_ssl
    
    # Show summary
    show_ssl_summary
    
    success "🎉 SSL/TLS setup completed successfully!"
}

# Handle command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
