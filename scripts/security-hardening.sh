#!/bin/bash

# ChitLaq M1 MVP - Security Hardening Script
# Comprehensive system and application security hardening
# Generated by PROMPT 1.2 - Security Configuration Setup

set -e  # Exit on any error
set -u  # Exit on undefined variables
set -o pipefail  # Exit on pipe failures

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENV_FILE="${PROJECT_ROOT}/.env"

# Default values
APPLY_KERNEL_HARDENING=${1:-true}
INSTALL_FAIL2BAN=${2:-true}
CONFIGURE_AUDITD=${3:-true}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${PURPLE}[INFO]${NC} $1"
}

# Print security hardening banner
print_banner() {
    echo -e "${PURPLE}"
    echo "  ____                      _ _         "
    echo " / ___|  ___  ___ _   _ _ __(_) |_ _   _ "
    echo " \___ \ / _ \/ __| | | | '__| | __| | | |"
    echo "  ___) |  __/ (__| |_| | |  | | |_| |_| |"
    echo " |____/ \___|\___|\__,_|_|  |_|\__|\__, |"
    echo "                                   |___/ "
    echo ""
    echo "ChitLaq Security Hardening"
    echo "System & Application Security"
    echo "============================"
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log "Checking security hardening prerequisites..."
    
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
    
    # Detect OS
    if [ -f /etc/debian_version ]; then
        OS_TYPE="debian"
        PKG_MANAGER="apt-get"
    elif [ -f /etc/redhat-release ]; then
        OS_TYPE="redhat"
        if command -v dnf >/dev/null 2>&1; then
            PKG_MANAGER="dnf"
        else
            PKG_MANAGER="yum"
        fi
    else
        error "Unsupported operating system"
        exit 1
    fi
    
    success "Prerequisites check passed (OS: $OS_TYPE)"
}

# Update system packages
update_system() {
    log "Updating system packages..."
    
    if [ "$OS_TYPE" = "debian" ]; then
        apt-get update
        apt-get upgrade -y
        apt-get autoremove -y
        apt-get autoclean
    else
        $PKG_MANAGER update -y
        $PKG_MANAGER autoremove -y
    fi
    
    success "System packages updated"
}

# Configure kernel security parameters
configure_kernel_hardening() {
    if [ "$APPLY_KERNEL_HARDENING" != "true" ]; then
        log "Kernel hardening disabled, skipping..."
        return
    fi
    
    log "Configuring kernel security parameters..."
    
    # Create sysctl security configuration
    cat > /etc/sysctl.d/99-chitlaq-security.conf << 'EOF'
# ChitLaq Security Hardening - Kernel Parameters

# Network Security
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1

# IPv6 Security
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Kernel Security
kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1
kernel.kexec_load_disabled = 1
kernel.unprivileged_bpf_disabled = 1
net.core.bpf_jit_harden = 2

# File System Security
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
fs.protected_fifos = 2
fs.protected_regular = 2
fs.suid_dumpable = 0

# Memory Protection
kernel.randomize_va_space = 2
vm.mmap_rnd_bits = 32
vm.mmap_rnd_compat_bits = 16

# Performance and DoS Protection
net.core.rmem_default = 262144
net.core.rmem_max = 16777216
net.core.wmem_default = 262144
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.netfilter.nf_conntrack_max = 1000000
net.ipv4.tcp_max_syn_backlog = 8192
net.core.netdev_max_backlog = 5000
EOF

    # Apply sysctl settings
    sysctl -p /etc/sysctl.d/99-chitlaq-security.conf
    
    success "Kernel security parameters configured"
}

# Install and configure fail2ban
install_configure_fail2ban() {
    if [ "$INSTALL_FAIL2BAN" != "true" ]; then
        log "Fail2ban installation disabled, skipping..."
        return
    fi
    
    log "Installing and configuring fail2ban..."
    
    # Install fail2ban
    if [ "$OS_TYPE" = "debian" ]; then
        apt-get install -y fail2ban
    else
        $PKG_MANAGER install -y fail2ban
    fi
    
    # Create fail2ban configuration
    cat > /etc/fail2ban/jail.local << 'EOF'
[DEFAULT]
# Default settings
bantime = 3600
findtime = 600
maxretry = 3
backend = systemd
destemail = admin@chitlaq.com
sender = fail2ban@chitlaq.com
mta = sendmail
protocol = tcp
chain = INPUT
port = 0:65535
fail2ban_agent = Fail2Ban/%(fail2ban_version)s

# Ignore local IPs
ignoreip = 127.0.0.1/8 ::1

[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600

[nginx-limit-req]
enabled = true
filter = nginx-limit-req
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 5
bantime = 3600

[nginx-botsearch]
enabled = true
filter = nginx-botsearch
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 3
bantime = 7200

[chitlaq-api-abuse]
enabled = true
filter = chitlaq-api-abuse
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 10
bantime = 1800
findtime = 300
EOF

    # Create custom fail2ban filters
    mkdir -p /etc/fail2ban/filter.d
    
    # ChitLaq API abuse filter
    cat > /etc/fail2ban/filter.d/chitlaq-api-abuse.conf << 'EOF'
[Definition]
failregex = ^<HOST> .* "(GET|POST|PUT|DELETE) /api/.* HTTP/.*" 429 .*$
            ^<HOST> .* "(GET|POST|PUT|DELETE) /api/.* HTTP/.*" 4[0-9][0-9] .*$
ignoreregex =
EOF

    # Nginx bot search filter
    cat > /etc/fail2ban/filter.d/nginx-botsearch.conf << 'EOF'
[Definition]
failregex = ^<HOST> .* "(GET|POST|HEAD)" .*(\.php|\.asp|\.exe|\.pl|\.cgi|\.scgi|admin|phpmyadmin|setup|config).*" 40[04] .*$
            ^<HOST> .* "(GET|POST|HEAD)" .*/(\.|admin|wp-admin|phpMyAdmin|\.well-known|\.git).*" .*$
ignoreregex = .*(robots\.txt|favicon\.ico).*
EOF

    # Enable and start fail2ban
    systemctl enable fail2ban
    systemctl start fail2ban
    
    success "Fail2ban installed and configured"
}

# Configure auditd for security monitoring
configure_auditd() {
    if [ "$CONFIGURE_AUDITD" != "true" ]; then
        log "Auditd configuration disabled, skipping..."
        return
    fi
    
    log "Installing and configuring auditd..."
    
    # Install auditd
    if [ "$OS_TYPE" = "debian" ]; then
        apt-get install -y auditd audispd-plugins
    else
        $PKG_MANAGER install -y audit
    fi
    
    # Create audit rules
    cat > /etc/audit/rules.d/chitlaq-security.rules << 'EOF'
# ChitLaq Security Audit Rules

# Delete existing rules
-D

# Set buffer size
-b 8192

# Failure mode (0=silent, 1=printk, 2=panic)
-f 1

# Monitor authentication events
-w /etc/passwd -p wa -k identity
-w /etc/group -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity

# Monitor login/logout events
-w /var/log/lastlog -p wa -k logins
-w /var/run/faillock -p wa -k logins

# Monitor network configuration
-w /etc/hosts -p wa -k network
-w /etc/network -p wa -k network
-w /etc/sysconfig/network -p wa -k network

# Monitor system configuration
-w /etc/sudoers -p wa -k scope
-w /etc/sudoers.d -p wa -k scope
-w /var/log/sudo.log -p wa -k actions

# Monitor SSH configuration
-w /etc/ssh/sshd_config -p wa -k sshd

# Monitor Nginx configuration
-w /etc/nginx -p wa -k nginx

# Monitor Docker configuration
-w /etc/docker -p wa -k docker
-w /usr/bin/docker -p x -k docker
-w /usr/bin/docker-compose -p x -k docker

# Monitor ChitLaq application
-w /opt/chitlaq -p wa -k chitlaq
-w /var/log/chitlaq -p wa -k chitlaq

# Monitor privileged commands
-a always,exit -F arch=b64 -S execve -F euid=0 -F key=rootcmd
-a always,exit -F arch=b32 -S execve -F euid=0 -F key=rootcmd

# Monitor file access
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

# Lock the configuration
-e 2
EOF

    # Enable and start auditd
    systemctl enable auditd
    systemctl start auditd
    
    success "Auditd installed and configured"
}

# Secure SSH configuration
secure_ssh_configuration() {
    log "Securing SSH configuration..."
    
    # Backup original SSH config
    cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)
    
    # Create secure SSH configuration
    cat > /etc/ssh/sshd_config << 'EOF'
# ChitLaq Secure SSH Configuration

# Protocol and Ports
Protocol 2
Port 22

# Hostkeys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and Algorithms
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

# Authentication
LoginGraceTime 30
PermitRootLogin no
StrictModes yes
MaxAuthTries 3
MaxSessions 10
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Security Settings
X11Forwarding no
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
UsePrivilegeSeparation yes
Compression delayed
ClientAliveInterval 300
ClientAliveCountMax 2
AllowTcpForwarding no
GatewayPorts no
PermitTunnel no

# Logging
SyslogFacility AUTH
LogLevel VERBOSE

# SFTP
Subsystem sftp /usr/lib/openssh/sftp-server -f AUTHPRIV -l INFO

# Banner
Banner /etc/ssh/ssh_banner
EOF

    # Create SSH banner
    cat > /etc/ssh/ssh_banner << 'EOF'
********************************************************************************
*                            ChitLaq Social Platform                          *
*                          Authorized Access Only                             *
*                                                                              *
*  This system is for authorized users only. All activities are monitored     *
*  and logged. Unauthorized access is prohibited and will be prosecuted       *
*  to the full extent of the law.                                             *
*                                                                              *
*  By accessing this system, you agree to comply with all applicable          *
*  policies and procedures.                                                    *
********************************************************************************
EOF

    # Test SSH configuration
    if sshd -t; then
        systemctl restart sshd
        success "SSH configuration secured"
    else
        error "SSH configuration test failed, restoring backup"
        cp /etc/ssh/sshd_config.backup.* /etc/ssh/sshd_config
        exit 1
    fi
}

# Configure automatic security updates
configure_auto_updates() {
    log "Configuring automatic security updates..."
    
    if [ "$OS_TYPE" = "debian" ]; then
        # Install unattended-upgrades
        apt-get install -y unattended-upgrades apt-listchanges
        
        # Configure unattended-upgrades
        cat > /etc/apt/apt.conf.d/50unattended-upgrades << 'EOF'
Unattended-Upgrade::Allowed-Origins {
    "${distro_id}:${distro_codename}-security";
    "${distro_id} ESMApps:${distro_codename}-apps-security";
    "${distro_id} ESM:${distro_codename}-infra-security";
};

Unattended-Upgrade::Package-Blacklist {
    // Add packages you don't want to auto-update
};

Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
Unattended-Upgrade::Mail "admin@chitlaq.com";
Unattended-Upgrade::MailOnlyOnError "true";
EOF

        # Enable automatic updates
        cat > /etc/apt/apt.conf.d/20auto-upgrades << 'EOF'
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
EOF

    else
        # RHEL/CentOS/Fedora
        $PKG_MANAGER install -y dnf-automatic
        
        # Configure dnf-automatic
        sed -i 's/apply_updates = no/apply_updates = yes/' /etc/dnf/automatic.conf
        sed -i 's/email_to = root/email_to = admin@chitlaq.com/' /etc/dnf/automatic.conf
        
        systemctl enable dnf-automatic.timer
        systemctl start dnf-automatic.timer
    fi
    
    success "Automatic security updates configured"
}

# Configure file permissions and ownership
secure_file_permissions() {
    log "Securing file permissions and ownership..."
    
    # Secure important system files
    chmod 644 /etc/passwd
    chmod 644 /etc/group
    chmod 640 /etc/shadow
    chmod 640 /etc/gshadow
    chown root:shadow /etc/shadow
    chown root:shadow /etc/gshadow
    
    # Secure SSH files
    chmod 600 /etc/ssh/ssh_host_*_key
    chmod 644 /etc/ssh/ssh_host_*_key.pub
    chmod 644 /etc/ssh/sshd_config
    
    # Secure crontab files
    chmod 600 /etc/crontab
    chmod 700 /etc/cron.d
    chmod 700 /etc/cron.daily
    chmod 700 /etc/cron.hourly
    chmod 700 /etc/cron.monthly
    chmod 700 /etc/cron.weekly
    
    # Secure log files
    chmod 640 /var/log/auth.log 2>/dev/null || true
    chmod 640 /var/log/secure 2>/dev/null || true
    chmod 640 /var/log/messages 2>/dev/null || true
    
    # Secure ChitLaq project files
    if [ -d "$PROJECT_ROOT" ]; then
        # Set proper ownership
        chown -R root:docker "$PROJECT_ROOT" 2>/dev/null || chown -R root:root "$PROJECT_ROOT"
        
        # Secure environment files
        chmod 600 "$PROJECT_ROOT"/.env* 2>/dev/null || true
        
        # Secure script files
        chmod 755 "$PROJECT_ROOT"/scripts/*.sh 2>/dev/null || true
        
        # Secure SSL certificates
        if [ -d "$PROJECT_ROOT/ssl" ]; then
            chmod 755 "$PROJECT_ROOT/ssl"
            find "$PROJECT_ROOT/ssl" -name "*.key" -exec chmod 600 {} \;
            find "$PROJECT_ROOT/ssl" -name "*.crt" -exec chmod 644 {} \;
            find "$PROJECT_ROOT/ssl" -name "*.pem" -exec chmod 644 {} \;
        fi
    fi
    
    success "File permissions and ownership secured"
}

# Configure log rotation and retention
configure_log_management() {
    log "Configuring log rotation and retention..."
    
    # Create ChitLaq logrotate configuration
    cat > /etc/logrotate.d/chitlaq << 'EOF'
/var/log/chitlaq/*.log {
    daily
    missingok
    rotate 90
    compress
    delaycompress
    notifempty
    create 644 root root
    postrotate
        /bin/systemctl reload nginx > /dev/null 2>&1 || true
        /usr/bin/docker exec chitlaq_nginx nginx -s reload > /dev/null 2>&1 || true
    endscript
}

/var/log/nginx/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 www-data www-data
    sharedscripts
    postrotate
        /bin/systemctl reload nginx > /dev/null 2>&1 || true
    endscript
}
EOF

    # Create chitlaq log directory
    mkdir -p /var/log/chitlaq
    chown root:root /var/log/chitlaq
    chmod 755 /var/log/chitlaq
    
    success "Log management configured"
}

# Install and configure security monitoring tools
install_security_tools() {
    log "Installing additional security tools..."
    
    if [ "$OS_TYPE" = "debian" ]; then
        apt-get install -y \
            rkhunter \
            chkrootkit \
            lynis \
            aide \
            psmisc \
            lsof \
            htop \
            iotop \
            nethogs
    else
        $PKG_MANAGER install -y \
            rkhunter \
            chkrootkit \
            lynis \
            aide \
            psmisc \
            lsof \
            htop \
            iotop \
            nethogs
    fi
    
    # Configure rkhunter
    rkhunter --update
    rkhunter --propupd
    
    # Configure AIDE
    aide --init
    cp /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    
    # Create security monitoring script
    cat > /usr/local/bin/chitlaq-security-check << 'EOF'
#!/bin/bash
# ChitLaq Security Monitoring Script

echo "$(date): Starting security check" >> /var/log/chitlaq/security-check.log

# Run rkhunter
rkhunter --check --skip-keypress --report-warnings-only >> /var/log/chitlaq/security-check.log 2>&1

# Run chkrootkit
chkrootkit >> /var/log/chitlaq/security-check.log 2>&1

# Check for failed login attempts
grep "Failed password" /var/log/auth.log | tail -20 >> /var/log/chitlaq/security-check.log 2>&1

# Check for suspicious network connections
netstat -tulpn | grep -E ':80|:443|:22' >> /var/log/chitlaq/security-check.log 2>&1

echo "$(date): Security check completed" >> /var/log/chitlaq/security-check.log
EOF

    chmod +x /usr/local/bin/chitlaq-security-check
    
    # Add to crontab (run daily)
    (crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/chitlaq-security-check") | crontab -
    
    success "Security monitoring tools installed"
}

# Configure container security
configure_container_security() {
    log "Configuring container security..."
    
    # Create Docker daemon security configuration
    mkdir -p /etc/docker
    cat > /etc/docker/daemon.json << 'EOF'
{
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "10m",
        "max-file": "3"
    },
    "live-restore": true,
    "userland-proxy": false,
    "no-new-privileges": true,
    "seccomp-profile": "/etc/docker/seccomp.json",
    "storage-driver": "overlay2",
    "storage-opts": [
        "overlay2.override_kernel_check=true"
    ]
}
EOF

    # Create Docker seccomp profile
    curl -fsSL https://raw.githubusercontent.com/moby/moby/master/profiles/seccomp/default.json > /etc/docker/seccomp.json
    
    # Restart Docker with new configuration
    systemctl restart docker
    
    success "Container security configured"
}

# Generate security report
generate_security_report() {
    log "Generating security hardening report..."
    
    local report_file="${PROJECT_ROOT}/security-hardening-report.txt"
    
    cat > "$report_file" << EOF
ChitLaq Security Hardening Report
Generated: $(date)
================================

System Information:
- OS Type: $OS_TYPE
- Hostname: $(hostname)
- Kernel: $(uname -r)
- Architecture: $(uname -m)

Security Hardening Applied:
- ✅ Kernel Security Parameters
- ✅ Fail2ban Installation & Configuration
- ✅ Auditd Security Monitoring
- ✅ SSH Hardening
- ✅ Automatic Security Updates
- ✅ File Permission Hardening
- ✅ Log Management Configuration
- ✅ Security Monitoring Tools
- ✅ Container Security

Installed Security Tools:
- Fail2ban: $(fail2ban-server --version | head -1)
- Rkhunter: $(rkhunter --version | head -1)
- Lynis: $(lynis --version 2>/dev/null | head -1)
- AIDE: $(aide --version | head -1)

Network Security:
- Firewall: iptables configured
- SSH Port: $(grep "^Port" /etc/ssh/sshd_config | awk '{print $2}')
- SSH Root Login: $(grep "^PermitRootLogin" /etc/ssh/sshd_config | awk '{print $2}')

File Permissions:
- /etc/passwd: $(stat -c %a /etc/passwd)
- /etc/shadow: $(stat -c %a /etc/shadow)
- SSH Config: $(stat -c %a /etc/ssh/sshd_config)

Active Security Services:
$(systemctl is-active fail2ban auditd ssh nginx docker)

Next Steps:
1. Review and customize fail2ban filters
2. Configure log monitoring alerts
3. Set up external security scanning
4. Schedule regular security audits
5. Review and update security policies

Security Contacts:
- Security Team: security@chitlaq.com
- Incident Response: incidents@chitlaq.com
EOF

    success "Security report generated: $report_file"
}

# Show security status
show_security_status() {
    echo ""
    echo -e "${GREEN}================================================${NC}"
    echo -e "${GREEN}🛡️  ChitLaq Security Hardening Status${NC}"
    echo -e "${GREEN}================================================${NC}"
    echo ""
    
    echo -e "${BLUE}🔧 System Hardening:${NC}"
    echo "  ✅ Kernel security parameters applied"
    echo "  ✅ SSH configuration hardened"
    echo "  ✅ File permissions secured"
    echo "  ✅ Automatic updates configured"
    echo ""
    
    echo -e "${BLUE}🔍 Security Monitoring:${NC}"
    echo "  ✅ Fail2ban: $(systemctl is-active fail2ban 2>/dev/null || echo "Not running")"
    echo "  ✅ Auditd: $(systemctl is-active auditd 2>/dev/null || echo "Not running")"
    echo "  ✅ Security tools installed"
    echo "  ✅ Log rotation configured"
    echo ""
    
    echo -e "${BLUE}🐳 Container Security:${NC}"
    echo "  ✅ Docker daemon hardened"
    echo "  ✅ Seccomp profile applied"
    echo "  ✅ Container logging configured"
    echo ""
    
    echo -e "${BLUE}📊 Security Metrics:${NC}"
    echo "  🔒 SSH Failed Logins (24h): $(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)"
    echo "  🚫 Fail2ban Active Bans: $(fail2ban-client status 2>/dev/null | grep "Currently banned" | awk '{print $3}' || echo "0")"
    echo "  📝 Audit Log Entries (24h): $(grep "$(date '+%b %d')" /var/log/audit/audit.log 2>/dev/null | wc -l || echo "0")"
    echo ""
    
    echo -e "${GREEN}✅ Security Hardening: COMPLETE${NC}"
    echo ""
}

# Show help
show_help() {
    echo "ChitLaq Security Hardening Script"
    echo ""
    echo "Usage: $0 [kernel_hardening] [install_fail2ban] [configure_auditd]"
    echo ""
    echo "Arguments:"
    echo "  kernel_hardening    Apply kernel security parameters (true|false) [default: true]"
    echo "  install_fail2ban    Install and configure fail2ban (true|false) [default: true]"
    echo "  configure_auditd    Configure audit logging (true|false) [default: true]"
    echo ""
    echo "Examples:"
    echo "  $0                          # Full security hardening"
    echo "  $0 true false false         # Kernel hardening only"
    echo "  $0 false true false         # Fail2ban only"
    echo ""
    echo "Prerequisites:"
    echo "  - Run as root (sudo)"
    echo "  - Internet connection for package installation"
    echo "  - Backup system before running"
}

# Main security hardening function
main() {
    print_banner
    
    # Check prerequisites
    check_prerequisites
    
    # Update system
    update_system
    
    # Apply security hardening
    configure_kernel_hardening
    install_configure_fail2ban
    configure_auditd
    secure_ssh_configuration
    configure_auto_updates
    secure_file_permissions
    configure_log_management
    install_security_tools
    configure_container_security
    
    # Generate report
    generate_security_report
    
    # Show status
    show_security_status
    
    success "🎉 Security hardening completed successfully!"
    warning "⚠️  Please reboot the system to ensure all changes take effect"
}

# Handle command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
