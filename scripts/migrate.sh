#!/bin/bash

# ChitLaq M1 MVP - Database Migration Script
# Automated migration runner with rollback capability
# Generated by PROMPT 1.3 - Database Schema & Migrations

set -euo pipefail

# ===============================
# CONFIGURATION
# ===============================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
MIGRATIONS_DIR="$PROJECT_ROOT/migrations"
SEED_DATA_DIR="$PROJECT_ROOT/seed-data"
BACKUP_DIR="$PROJECT_ROOT/backups/migrations"

# Default values
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-5432}"
DB_NAME="${DB_NAME:-chitlaq_main}"
DB_USER="${DB_USER:-chitlaq_app}"
DB_PASSWORD="${DB_PASSWORD:-}"
ENVIRONMENT="${ENVIRONMENT:-development}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ===============================
# UTILITY FUNCTIONS
# ===============================

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if PostgreSQL is accessible
check_db_connection() {
    log "Checking database connection..."
    
    if ! command_exists psql; then
        error "psql command not found. Please install PostgreSQL client."
    fi
    
    export PGPASSWORD="$DB_PASSWORD"
    
    if ! psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
        error "Cannot connect to database. Please check your connection parameters."
    fi
    
    success "Database connection established"
}

# Create backup directory if it doesn't exist
setup_backup_dir() {
    if [[ ! -d "$BACKUP_DIR" ]]; then
        mkdir -p "$BACKUP_DIR"
        log "Created backup directory: $BACKUP_DIR"
    fi
}

# Create migration tracking table if it doesn't exist
setup_migration_table() {
    log "Setting up migration tracking table..."
    
    export PGPASSWORD="$DB_PASSWORD"
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" <<EOF
-- Create migration tracking table
CREATE TABLE IF NOT EXISTS migration_history (
    id SERIAL PRIMARY KEY,
    migration_file VARCHAR(255) NOT NULL UNIQUE,
    applied_at TIMESTAMPTZ DEFAULT NOW(),
    checksum VARCHAR(64) NOT NULL,
    execution_time_ms INTEGER,
    applied_by VARCHAR(100) DEFAULT current_user,
    rollback_sql TEXT,
    environment VARCHAR(50) DEFAULT '$ENVIRONMENT'
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS idx_migration_history_file ON migration_history(migration_file);
CREATE INDEX IF NOT EXISTS idx_migration_history_applied_at ON migration_history(applied_at);

-- Grant necessary permissions
GRANT SELECT, INSERT, UPDATE ON migration_history TO $DB_USER;
GRANT USAGE, SELECT ON SEQUENCE migration_history_id_seq TO $DB_USER;
EOF
    
    success "Migration tracking table ready"
}

# Calculate file checksum
calculate_checksum() {
    local file="$1"
    if command_exists sha256sum; then
        sha256sum "$file" | cut -d' ' -f1
    elif command_exists shasum; then
        shasum -a 256 "$file" | cut -d' ' -f1
    else
        error "No checksum utility found (sha256sum or shasum required)"
    fi
}

# Check if migration has been applied
is_migration_applied() {
    local migration_file="$1"
    local checksum="$2"
    
    export PGPASSWORD="$DB_PASSWORD"
    local count=$(psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c \
        "SELECT COUNT(*) FROM migration_history WHERE migration_file = '$migration_file' AND checksum = '$checksum';")
    
    [[ $(echo "$count" | tr -d ' ') -eq 1 ]]
}

# Create database backup before migrations
create_backup() {
    local backup_name="pre_migration_$(date +%Y%m%d_%H%M%S).sql"
    local backup_path="$BACKUP_DIR/$backup_name"
    
    log "Creating database backup: $backup_name"
    
    export PGPASSWORD="$DB_PASSWORD"
    if pg_dump -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" \
        --no-owner --no-privileges --create --clean > "$backup_path"; then
        success "Backup created: $backup_path"
        echo "$backup_path"
    else
        error "Failed to create backup"
    fi
}

# Apply a single migration
apply_migration() {
    local migration_path="$1"
    local migration_file=$(basename "$migration_path")
    local checksum=$(calculate_checksum "$migration_path")
    
    log "Applying migration: $migration_file"
    
    # Check if already applied
    if is_migration_applied "$migration_file" "$checksum"; then
        warning "Migration $migration_file already applied (checksum match), skipping"
        return 0
    fi
    
    # Start timing
    local start_time=$(date +%s%3N)
    
    # Apply migration in a transaction
    export PGPASSWORD="$DB_PASSWORD"
    local temp_sql="/tmp/migration_$$.sql"
    
    cat > "$temp_sql" <<EOF
BEGIN;

-- Apply the migration
$(cat "$migration_path")

-- Record successful migration
INSERT INTO migration_history (migration_file, checksum, execution_time_ms, environment)
VALUES ('$migration_file', '$checksum', 0, '$ENVIRONMENT')
ON CONFLICT (migration_file) DO UPDATE SET
    checksum = EXCLUDED.checksum,
    applied_at = NOW(),
    execution_time_ms = EXCLUDED.execution_time_ms,
    environment = EXCLUDED.environment;

COMMIT;
EOF
    
    if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -f "$temp_sql"; then
        local end_time=$(date +%s%3N)
        local execution_time=$((end_time - start_time))
        
        # Update execution time
        psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c \
            "UPDATE migration_history SET execution_time_ms = $execution_time WHERE migration_file = '$migration_file';"
        
        success "Migration $migration_file applied successfully (${execution_time}ms)"
        rm -f "$temp_sql"
    else
        rm -f "$temp_sql"
        error "Failed to apply migration: $migration_file"
    fi
}

# Load seed data
load_seed_data() {
    local seed_file="$1"
    log "Loading seed data: $(basename "$seed_file")"
    
    export PGPASSWORD="$DB_PASSWORD"
    if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -f "$seed_file"; then
        success "Seed data loaded: $(basename "$seed_file")"
    else
        error "Failed to load seed data: $(basename "$seed_file")"
    fi
}

# Show migration status
show_status() {
    log "Migration Status:"
    
    export PGPASSWORD="$DB_PASSWORD"
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" <<EOF
SELECT 
    migration_file,
    applied_at,
    execution_time_ms || 'ms' as execution_time,
    applied_by,
    environment
FROM migration_history
ORDER BY applied_at DESC;
EOF
}

# Rollback last migration
rollback_last() {
    warning "Rollback functionality is limited. Always test in development first!"
    
    export PGPASSWORD="$DB_PASSWORD"
    local last_migration=$(psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c \
        "SELECT migration_file FROM migration_history ORDER BY applied_at DESC LIMIT 1;" | tr -d ' ')
    
    if [[ -z "$last_migration" ]]; then
        warning "No migrations found to rollback"
        return 0
    fi
    
    log "Last applied migration: $last_migration"
    
    # For now, just remove from tracking table
    # In production, you'd want proper rollback scripts
    read -p "Remove $last_migration from migration history? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c \
            "DELETE FROM migration_history WHERE migration_file = '$last_migration';"
        warning "Migration record removed. Manual schema rollback may be required."
    fi
}

# Validate migration files
validate_migrations() {
    log "Validating migration files..."
    
    local valid=true
    
    for migration in "$MIGRATIONS_DIR"/*.sql; do
        if [[ ! -f "$migration" ]]; then
            continue
        fi
        
        local filename=$(basename "$migration")
        
        # Check naming convention (001_name.sql)
        if [[ ! "$filename" =~ ^[0-9]{3}_[a-zA-Z0-9_]+\.sql$ ]]; then
            error "Invalid migration filename: $filename (should match: 001_name.sql)"
            valid=false
        fi
        
        # Check file is readable
        if [[ ! -r "$migration" ]]; then
            error "Cannot read migration file: $filename"
            valid=false
        fi
        
        # Basic SQL syntax check (if sqlfluff available)
        if command_exists sqlfluff; then
            if ! sqlfluff lint "$migration" --dialect postgres >/dev/null 2>&1; then
                warning "Potential SQL syntax issues in: $filename"
            fi
        fi
    done
    
    if [[ "$valid" == true ]]; then
        success "All migration files validated"
    else
        error "Migration validation failed"
    fi
}

# ===============================
# MAIN FUNCTIONS
# ===============================

run_migrations() {
    local create_backup_flag="$1"
    
    log "Starting database migrations for environment: $ENVIRONMENT"
    
    check_db_connection
    setup_backup_dir
    setup_migration_table
    validate_migrations
    
    # Create backup if requested
    if [[ "$create_backup_flag" == "true" ]]; then
        create_backup
    fi
    
    # Apply migrations in order
    local migration_count=0
    for migration in "$MIGRATIONS_DIR"/*.sql; do
        if [[ -f "$migration" ]]; then
            apply_migration "$migration"
            ((migration_count++))
        fi
    done
    
    if [[ $migration_count -eq 0 ]]; then
        warning "No migration files found in $MIGRATIONS_DIR"
    else
        success "Applied $migration_count migrations"
    fi
}

run_seed_data() {
    log "Loading seed data..."
    
    check_db_connection
    
    # Load seed data in order
    for seed_file in "$SEED_DATA_DIR"/*.sql; do
        if [[ -f "$seed_file" ]]; then
            load_seed_data "$seed_file"
        fi
    done
    
    success "Seed data loading completed"
}

# Show usage information
show_usage() {
    cat <<EOF
ChitLaq Database Migration Tool

Usage: $0 [COMMAND] [OPTIONS]

Commands:
    migrate         Run all pending migrations
    migrate-backup  Run migrations with pre-migration backup
    seed            Load seed data
    status          Show migration status
    rollback        Rollback last migration (limited)
    validate        Validate migration files
    help            Show this help message

Environment Variables:
    DB_HOST         Database host (default: localhost)
    DB_PORT         Database port (default: 5432)
    DB_NAME         Database name (default: chitlaq_main)
    DB_USER         Database user (default: chitlaq_app)
    DB_PASSWORD     Database password (required)
    ENVIRONMENT     Environment name (default: development)

Examples:
    # Run migrations with backup
    DB_PASSWORD=mypass $0 migrate-backup
    
    # Load seed data
    DB_PASSWORD=mypass $0 seed
    
    # Check migration status
    DB_PASSWORD=mypass $0 status

EOF
}

# ===============================
# MAIN SCRIPT
# ===============================

main() {
    local command="${1:-help}"
    
    case "$command" in
        "migrate")
            run_migrations false
            ;;
        "migrate-backup")
            run_migrations true
            ;;
        "seed")
            run_seed_data
            ;;
        "status")
            check_db_connection
            setup_migration_table
            show_status
            ;;
        "rollback")
            check_db_connection
            rollback_last
            ;;
        "validate")
            validate_migrations
            ;;
        "help"|"-h"|"--help")
            show_usage
            ;;
        *)
            error "Unknown command: $command. Use '$0 help' for usage information."
            ;;
    esac
}

# Check for required environment variables
if [[ -z "${DB_PASSWORD:-}" ]]; then
    error "DB_PASSWORD environment variable is required"
fi

# Run main function with all arguments
main "$@"
